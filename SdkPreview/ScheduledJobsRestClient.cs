// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.Azure.IoTCentral.Preview.Models;

namespace Microsoft.Azure.IoTCentral.Preview
{
    internal partial class ScheduledJobsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _subdomain;
        private readonly string _baseDomain;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of ScheduledJobsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subdomain"> The application subdomain. </param>
        /// <param name="baseDomain"> The base domain for all Azure IoT Central service requests. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="subdomain"/>, <paramref name="baseDomain"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subdomain"/> is an empty string, and was expected to be non-empty. </exception>
        public ScheduledJobsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subdomain, string baseDomain = "azureiotcentral.com", string apiVersion = "2022-10-31-preview")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _subdomain = subdomain ?? throw new ArgumentNullException(nameof(subdomain));
            _baseDomain = baseDomain ?? throw new ArgumentNullException(nameof(baseDomain));
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateListRequest(int? maxpagesize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/scheduledJobs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the list of scheduled job definitions in an application. </summary>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ScheduledJobCollection>> ListAsync(int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(maxpagesize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScheduledJobCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ScheduledJobCollection.DeserializeScheduledJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the list of scheduled job definitions in an application. </summary>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ScheduledJobCollection> List(int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(maxpagesize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScheduledJobCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ScheduledJobCollection.DeserializeScheduledJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string scheduledJobId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/scheduledJobs/", false);
            uri.AppendPath(scheduledJobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a scheduled job by ID. </summary>
        /// <param name="scheduledJobId"> Unique ID of the scheduled job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledJobId"/> is null. </exception>
        /// <remarks> Get details about a scheduled job by ID. </remarks>
        public async Task<Response<ScheduledJob>> GetAsync(string scheduledJobId, CancellationToken cancellationToken = default)
        {
            if (scheduledJobId == null)
            {
                throw new ArgumentNullException(nameof(scheduledJobId));
            }

            using var message = CreateGetRequest(scheduledJobId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScheduledJob value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ScheduledJob.DeserializeScheduledJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a scheduled job by ID. </summary>
        /// <param name="scheduledJobId"> Unique ID of the scheduled job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledJobId"/> is null. </exception>
        /// <remarks> Get details about a scheduled job by ID. </remarks>
        public Response<ScheduledJob> Get(string scheduledJobId, CancellationToken cancellationToken = default)
        {
            if (scheduledJobId == null)
            {
                throw new ArgumentNullException(nameof(scheduledJobId));
            }

            using var message = CreateGetRequest(scheduledJobId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScheduledJob value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ScheduledJob.DeserializeScheduledJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateRequest(string scheduledJobId, ScheduledJob body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/scheduledJobs/", false);
            uri.AppendPath(scheduledJobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create or update a scheduled job. </summary>
        /// <param name="scheduledJobId"> Unique ID of the scheduled job. </param>
        /// <param name="body"> Scheduled job definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledJobId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Create or update a scheduled job by ID. </remarks>
        public async Task<Response<ScheduledJob>> CreateAsync(string scheduledJobId, ScheduledJob body, CancellationToken cancellationToken = default)
        {
            if (scheduledJobId == null)
            {
                throw new ArgumentNullException(nameof(scheduledJobId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateRequest(scheduledJobId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScheduledJob value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ScheduledJob.DeserializeScheduledJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create or update a scheduled job. </summary>
        /// <param name="scheduledJobId"> Unique ID of the scheduled job. </param>
        /// <param name="body"> Scheduled job definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledJobId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Create or update a scheduled job by ID. </remarks>
        public Response<ScheduledJob> Create(string scheduledJobId, ScheduledJob body, CancellationToken cancellationToken = default)
        {
            if (scheduledJobId == null)
            {
                throw new ArgumentNullException(nameof(scheduledJobId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateRequest(scheduledJobId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScheduledJob value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ScheduledJob.DeserializeScheduledJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRequest(string scheduledJobId, object body, string ifMatch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/scheduledJobs/", false);
            uri.AppendPath(scheduledJobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (ifMatch != null)
            {
                request.Headers.Add("If-Match", ifMatch);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update a scheduled job via patch. </summary>
        /// <param name="scheduledJobId"> Unique ID of the scheduled job. </param>
        /// <param name="body"> Scheduled job patch. </param>
        /// <param name="ifMatch"> Only perform the operation if the entity&apos;s etag matches one of the etags provided or * is provided. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledJobId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update an existing scheduled job by ID. </remarks>
        public async Task<Response<ScheduledJob>> UpdateAsync(string scheduledJobId, object body, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (scheduledJobId == null)
            {
                throw new ArgumentNullException(nameof(scheduledJobId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateRequest(scheduledJobId, body, ifMatch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScheduledJob value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ScheduledJob.DeserializeScheduledJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a scheduled job via patch. </summary>
        /// <param name="scheduledJobId"> Unique ID of the scheduled job. </param>
        /// <param name="body"> Scheduled job patch. </param>
        /// <param name="ifMatch"> Only perform the operation if the entity&apos;s etag matches one of the etags provided or * is provided. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledJobId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update an existing scheduled job by ID. </remarks>
        public Response<ScheduledJob> Update(string scheduledJobId, object body, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (scheduledJobId == null)
            {
                throw new ArgumentNullException(nameof(scheduledJobId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateRequest(scheduledJobId, body, ifMatch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScheduledJob value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ScheduledJob.DeserializeScheduledJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveRequest(string scheduledJobId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/scheduledJobs/", false);
            uri.AppendPath(scheduledJobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a scheduled job. </summary>
        /// <param name="scheduledJobId"> Unique ID of the scheduled job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledJobId"/> is null. </exception>
        /// <remarks> Delete an existing scheduled job by ID. </remarks>
        public async Task<Response> RemoveAsync(string scheduledJobId, CancellationToken cancellationToken = default)
        {
            if (scheduledJobId == null)
            {
                throw new ArgumentNullException(nameof(scheduledJobId));
            }

            using var message = CreateRemoveRequest(scheduledJobId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a scheduled job. </summary>
        /// <param name="scheduledJobId"> Unique ID of the scheduled job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledJobId"/> is null. </exception>
        /// <remarks> Delete an existing scheduled job by ID. </remarks>
        public Response Remove(string scheduledJobId, CancellationToken cancellationToken = default)
        {
            if (scheduledJobId == null)
            {
                throw new ArgumentNullException(nameof(scheduledJobId));
            }

            using var message = CreateRemoveRequest(scheduledJobId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListJobsRequest(string scheduledJobId, int? maxpagesize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/scheduledJobs/", false);
            uri.AppendPath(scheduledJobId, true);
            uri.AppendPath("/jobs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the list of jobs for a scheduled job definition. </summary>
        /// <param name="scheduledJobId"> Unique ID of the scheduled job. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledJobId"/> is null. </exception>
        public async Task<Response<JobCollection>> ListJobsAsync(string scheduledJobId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            if (scheduledJobId == null)
            {
                throw new ArgumentNullException(nameof(scheduledJobId));
            }

            using var message = CreateListJobsRequest(scheduledJobId, maxpagesize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobCollection.DeserializeJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the list of jobs for a scheduled job definition. </summary>
        /// <param name="scheduledJobId"> Unique ID of the scheduled job. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledJobId"/> is null. </exception>
        public Response<JobCollection> ListJobs(string scheduledJobId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            if (scheduledJobId == null)
            {
                throw new ArgumentNullException(nameof(scheduledJobId));
            }

            using var message = CreateListJobsRequest(scheduledJobId, maxpagesize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobCollection.DeserializeJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, int? maxpagesize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the list of scheduled job definitions in an application. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<ScheduledJobCollection>> ListNextPageAsync(string nextLink, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink, maxpagesize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScheduledJobCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ScheduledJobCollection.DeserializeScheduledJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the list of scheduled job definitions in an application. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<ScheduledJobCollection> ListNextPage(string nextLink, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink, maxpagesize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScheduledJobCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ScheduledJobCollection.DeserializeScheduledJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListJobsNextPageRequest(string nextLink, string scheduledJobId, int? maxpagesize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the list of jobs for a scheduled job definition. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="scheduledJobId"> Unique ID of the scheduled job. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="scheduledJobId"/> is null. </exception>
        public async Task<Response<JobCollection>> ListJobsNextPageAsync(string nextLink, string scheduledJobId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (scheduledJobId == null)
            {
                throw new ArgumentNullException(nameof(scheduledJobId));
            }

            using var message = CreateListJobsNextPageRequest(nextLink, scheduledJobId, maxpagesize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobCollection.DeserializeJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the list of jobs for a scheduled job definition. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="scheduledJobId"> Unique ID of the scheduled job. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="scheduledJobId"/> is null. </exception>
        public Response<JobCollection> ListJobsNextPage(string nextLink, string scheduledJobId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (scheduledJobId == null)
            {
                throw new ArgumentNullException(nameof(scheduledJobId));
            }

            using var message = CreateListJobsNextPageRequest(nextLink, scheduledJobId, maxpagesize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobCollection.DeserializeJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
