// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.Azure.IoTCentral.Preview.Models;

namespace Microsoft.Azure.IoTCentral.Preview
{
    /// <summary> The Devices service client. </summary>
    public partial class DevicesClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DevicesRestClient RestClient { get; }

        /// <summary> Initializes a new instance of DevicesClient for mocking. </summary>
        protected DevicesClient()
        {
        }

        /// <summary> Initializes a new instance of DevicesClient. </summary>
        /// <param name="subdomain"> The application subdomain. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="baseDomain"> The base domain for all Azure IoT Central service requests. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public DevicesClient(string subdomain, TokenCredential credential, string baseDomain = "azureiotcentral.com", AzureIoTCentralClientOptions options = null)
        {
            if (subdomain == null)
            {
                throw new ArgumentNullException(nameof(subdomain));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            if (baseDomain == null)
            {
                throw new ArgumentNullException(nameof(baseDomain));
            }

            options ??= new AzureIoTCentralClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://apps.azureiotcentral.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new DevicesRestClient(_clientDiagnostics, _pipeline, subdomain, baseDomain, options.Version);
        }

        /// <summary> Initializes a new instance of DevicesClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subdomain"> The application subdomain. </param>
        /// <param name="baseDomain"> The base domain for all Azure IoT Central service requests. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="subdomain"/>, <paramref name="baseDomain"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subdomain"/> is an empty string, and was expected to be non-empty. </exception>
        internal DevicesClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subdomain, string baseDomain = "azureiotcentral.com", string apiVersion = "2022-10-31-preview")
        {
            RestClient = new DevicesRestClient(clientDiagnostics, pipeline, subdomain, baseDomain, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get a device by ID. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get details about an existing device by device ID. </remarks>
        public virtual async Task<Response<Device>> GetAsync(string deviceId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(deviceId, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a device by ID. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get details about an existing device by device ID. </remarks>
        public virtual Response<Device> Get(string deviceId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.Get");
            scope.Start();
            try
            {
                return RestClient.Get(deviceId, expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device body. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a new device. </remarks>
        public virtual async Task<Response<Device>> CreateAsync(string deviceId, Device body, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.Create");
            scope.Start();
            try
            {
                return await RestClient.CreateAsync(deviceId, body, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device body. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a new device. </remarks>
        public virtual Response<Device> Create(string deviceId, Device body, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.Create");
            scope.Start();
            try
            {
                return RestClient.Create(deviceId, body, expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a device via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device patch body. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="ifMatch"> Only perform the operation if the entity&apos;s etag matches one of the etags provided or * is provided. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update an existing device by ID. </remarks>
        public virtual async Task<Response<Device>> UpdateAsync(string deviceId, object body, string expand = null, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.Update");
            scope.Start();
            try
            {
                return await RestClient.UpdateAsync(deviceId, body, expand, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a device via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device patch body. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="ifMatch"> Only perform the operation if the entity&apos;s etag matches one of the etags provided or * is provided. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update an existing device by ID. </remarks>
        public virtual Response<Device> Update(string deviceId, object body, string expand = null, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.Update");
            scope.Start();
            try
            {
                return RestClient.Update(deviceId, body, expand, ifMatch, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete an existing device by device ID. </remarks>
        public virtual async Task<Response> RemoveAsync(string deviceId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.Remove");
            scope.Start();
            try
            {
                return await RestClient.RemoveAsync(deviceId, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete an existing device by device ID. </remarks>
        public virtual Response Remove(string deviceId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.Remove");
            scope.Start();
            try
            {
                return RestClient.Remove(deviceId, expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Apply a deployment manifest to an edge device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Deployment Manifest data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeploymentManifest>> ApplyManifestAsync(string deviceId, DeploymentManifest body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ApplyManifest");
            scope.Start();
            try
            {
                return await RestClient.ApplyManifestAsync(deviceId, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Apply a deployment manifest to an edge device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Deployment Manifest data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeploymentManifest> ApplyManifest(string deviceId, DeploymentManifest body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ApplyManifest");
            scope.Start();
            try
            {
                return RestClient.ApplyManifest(deviceId, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device attestation. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Attestation>> GetAttestationAsync(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAttestation");
            scope.Start();
            try
            {
                return await RestClient.GetAttestationAsync(deviceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device attestation. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Attestation> GetAttestation(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAttestation");
            scope.Start();
            try
            {
                return RestClient.GetAttestation(deviceId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create an individual device attestation. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Individual device attestation body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Attestation>> CreateAttestationAsync(string deviceId, Attestation body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.CreateAttestation");
            scope.Start();
            try
            {
                return await RestClient.CreateAttestationAsync(deviceId, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create an individual device attestation. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Individual device attestation body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Attestation> CreateAttestation(string deviceId, Attestation body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.CreateAttestation");
            scope.Start();
            try
            {
                return RestClient.CreateAttestation(deviceId, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an individual device attestation via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Individual device attestation patch body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Attestation>> UpdateAttestationAsync(string deviceId, object body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.UpdateAttestation");
            scope.Start();
            try
            {
                return await RestClient.UpdateAttestationAsync(deviceId, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an individual device attestation via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Individual device attestation patch body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Attestation> UpdateAttestation(string deviceId, object body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.UpdateAttestation");
            scope.Start();
            try
            {
                return RestClient.UpdateAttestation(deviceId, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove an individual device attestation. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveAttestationAsync(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.RemoveAttestation");
            scope.Start();
            try
            {
                return await RestClient.RemoveAttestationAsync(deviceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove an individual device attestation. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveAttestation(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.RemoveAttestation");
            scope.Start();
            try
            {
                return RestClient.RemoveAttestation(deviceId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Run a device command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Run a command on a device. </remarks>
        public virtual async Task<Response<DeviceCommand>> RunCommandAsync(string deviceId, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.RunCommand");
            scope.Start();
            try
            {
                return await RestClient.RunCommandAsync(deviceId, commandName, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Run a device command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Run a command on a device. </remarks>
        public virtual Response<DeviceCommand> RunCommand(string deviceId, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.RunCommand");
            scope.Start();
            try
            {
                return RestClient.RunCommand(deviceId, commandName, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the components present in a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Collection>> ListComponentsAsync(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ListComponents");
            scope.Start();
            try
            {
                return await RestClient.ListComponentsAsync(deviceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the components present in a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Collection> ListComponents(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ListComponents");
            scope.Start();
            try
            {
                return RestClient.ListComponents(deviceId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Run a component command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Run a command on a component. </remarks>
        public virtual async Task<Response<DeviceCommand>> RunComponentCommandAsync(string deviceId, string componentName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.RunComponentCommand");
            scope.Start();
            try
            {
                return await RestClient.RunComponentCommandAsync(deviceId, componentName, commandName, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Run a component command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Run a command on a component. </remarks>
        public virtual Response<DeviceCommand> RunComponentCommand(string deviceId, string componentName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.RunComponentCommand");
            scope.Start();
            try
            {
                return RestClient.RunComponentCommand(deviceId, componentName, commandName, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyDictionary<string, object>>> GetComponentPropertiesAsync(string deviceId, string componentName, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetComponentProperties");
            scope.Start();
            try
            {
                return await RestClient.GetComponentPropertiesAsync(deviceId, componentName, unmodeled, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyDictionary<string, object>> GetComponentProperties(string deviceId, string componentName, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetComponentProperties");
            scope.Start();
            try
            {
                return RestClient.GetComponentProperties(deviceId, componentName, unmodeled, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace device properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Device properties. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyDictionary<string, object>>> ReplaceComponentPropertiesAsync(string deviceId, string componentName, IDictionary<string, object> body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ReplaceComponentProperties");
            scope.Start();
            try
            {
                return await RestClient.ReplaceComponentPropertiesAsync(deviceId, componentName, body, unmodeled, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace device properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Device properties. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyDictionary<string, object>> ReplaceComponentProperties(string deviceId, string componentName, IDictionary<string, object> body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ReplaceComponentProperties");
            scope.Start();
            try
            {
                return RestClient.ReplaceComponentProperties(deviceId, componentName, body, unmodeled, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update device properties for a specific component via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Device properties patch. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyDictionary<string, object>>> UpdateComponentPropertiesAsync(string deviceId, string componentName, object body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.UpdateComponentProperties");
            scope.Start();
            try
            {
                return await RestClient.UpdateComponentPropertiesAsync(deviceId, componentName, body, unmodeled, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update device properties for a specific component via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Device properties patch. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyDictionary<string, object>> UpdateComponentProperties(string deviceId, string componentName, object body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.UpdateComponentProperties");
            scope.Start();
            try
            {
                return RestClient.UpdateComponentProperties(deviceId, componentName, body, unmodeled, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get component telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the last telemetry value from a component. </remarks>
        public virtual async Task<Response<DeviceTelemetry>> GetComponentTelemetryValueAsync(string deviceId, string componentName, string telemetryName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetComponentTelemetryValue");
            scope.Start();
            try
            {
                return await RestClient.GetComponentTelemetryValueAsync(deviceId, componentName, telemetryName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get component telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the last telemetry value from a component. </remarks>
        public virtual Response<DeviceTelemetry> GetComponentTelemetryValue(string deviceId, string componentName, string telemetryName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetComponentTelemetryValue");
            scope.Start();
            try
            {
                return RestClient.GetComponentTelemetryValue(deviceId, componentName, telemetryName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device credentials. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeviceCredentials>> GetCredentialsAsync(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetCredentials");
            scope.Start();
            try
            {
                return await RestClient.GetCredentialsAsync(deviceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device credentials. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeviceCredentials> GetCredentials(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetCredentials");
            scope.Start();
            try
            {
                return RestClient.GetCredentials(deviceId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the modules present in a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Collection>> ListModulesAsync(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ListModules");
            scope.Start();
            try
            {
                return await RestClient.ListModulesAsync(deviceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the modules present in a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Collection> ListModules(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ListModules");
            scope.Start();
            try
            {
                return RestClient.ListModules(deviceId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Run a module command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Run a command on a module. </remarks>
        public virtual async Task<Response<DeviceCommand>> RunModuleCommandAsync(string deviceId, string moduleName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.RunModuleCommand");
            scope.Start();
            try
            {
                return await RestClient.RunModuleCommandAsync(deviceId, moduleName, commandName, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Run a module command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Run a command on a module. </remarks>
        public virtual Response<DeviceCommand> RunModuleCommand(string deviceId, string moduleName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.RunModuleCommand");
            scope.Start();
            try
            {
                return RestClient.RunModuleCommand(deviceId, moduleName, commandName, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the components present in a module. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Collection>> ListModuleComponentsAsync(string deviceId, string moduleName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ListModuleComponents");
            scope.Start();
            try
            {
                return await RestClient.ListModuleComponentsAsync(deviceId, moduleName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the components present in a module. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Collection> ListModuleComponents(string deviceId, string moduleName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ListModuleComponents");
            scope.Start();
            try
            {
                return RestClient.ListModuleComponents(deviceId, moduleName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Run a module component command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Run a command on a module. </remarks>
        public virtual async Task<Response<DeviceCommand>> RunModuleComponentCommandAsync(string deviceId, string moduleName, string componentName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.RunModuleComponentCommand");
            scope.Start();
            try
            {
                return await RestClient.RunModuleComponentCommandAsync(deviceId, moduleName, componentName, commandName, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Run a module component command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Run a command on a module. </remarks>
        public virtual Response<DeviceCommand> RunModuleComponentCommand(string deviceId, string moduleName, string componentName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.RunModuleComponentCommand");
            scope.Start();
            try
            {
                return RestClient.RunModuleComponentCommand(deviceId, moduleName, componentName, commandName, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get module properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyDictionary<string, object>>> GetModuleComponentPropertiesAsync(string deviceId, string moduleName, string componentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleComponentProperties");
            scope.Start();
            try
            {
                return await RestClient.GetModuleComponentPropertiesAsync(deviceId, moduleName, componentName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get module properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyDictionary<string, object>> GetModuleComponentProperties(string deviceId, string moduleName, string componentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleComponentProperties");
            scope.Start();
            try
            {
                return RestClient.GetModuleComponentProperties(deviceId, moduleName, componentName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace module properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Module properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyDictionary<string, object>>> ReplaceModuleComponentPropertiesAsync(string deviceId, string moduleName, string componentName, IDictionary<string, object> body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ReplaceModuleComponentProperties");
            scope.Start();
            try
            {
                return await RestClient.ReplaceModuleComponentPropertiesAsync(deviceId, moduleName, componentName, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace module properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Module properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyDictionary<string, object>> ReplaceModuleComponentProperties(string deviceId, string moduleName, string componentName, IDictionary<string, object> body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ReplaceModuleComponentProperties");
            scope.Start();
            try
            {
                return RestClient.ReplaceModuleComponentProperties(deviceId, moduleName, componentName, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update module properties for a specific component via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Module properties patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyDictionary<string, object>>> UpdateModuleComponentPropertiesAsync(string deviceId, string moduleName, string componentName, object body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.UpdateModuleComponentProperties");
            scope.Start();
            try
            {
                return await RestClient.UpdateModuleComponentPropertiesAsync(deviceId, moduleName, componentName, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update module properties for a specific component via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Module properties patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyDictionary<string, object>> UpdateModuleComponentProperties(string deviceId, string moduleName, string componentName, object body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.UpdateModuleComponentProperties");
            scope.Start();
            try
            {
                return RestClient.UpdateModuleComponentProperties(deviceId, moduleName, componentName, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get module component telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the last telemetry value from a module component. </remarks>
        public virtual async Task<Response<DeviceTelemetry>> GetModuleComponentTelemetryValueAsync(string deviceId, string moduleName, string componentName, string telemetryName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleComponentTelemetryValue");
            scope.Start();
            try
            {
                return await RestClient.GetModuleComponentTelemetryValueAsync(deviceId, moduleName, componentName, telemetryName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get module component telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the last telemetry value from a module component. </remarks>
        public virtual Response<DeviceTelemetry> GetModuleComponentTelemetryValue(string deviceId, string moduleName, string componentName, string telemetryName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleComponentTelemetryValue");
            scope.Start();
            try
            {
                return RestClient.GetModuleComponentTelemetryValue(deviceId, moduleName, componentName, telemetryName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get module properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get all property values of a module. </remarks>
        public virtual async Task<Response<IReadOnlyDictionary<string, object>>> GetModulePropertiesAsync(string deviceId, string moduleName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleProperties");
            scope.Start();
            try
            {
                return await RestClient.GetModulePropertiesAsync(deviceId, moduleName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get module properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get all property values of a module. </remarks>
        public virtual Response<IReadOnlyDictionary<string, object>> GetModuleProperties(string deviceId, string moduleName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleProperties");
            scope.Start();
            try
            {
                return RestClient.GetModuleProperties(deviceId, moduleName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace module properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="body"> Module properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Replace all property values of a module. </remarks>
        public virtual async Task<Response<IReadOnlyDictionary<string, object>>> ReplaceModulePropertiesAsync(string deviceId, string moduleName, IDictionary<string, object> body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ReplaceModuleProperties");
            scope.Start();
            try
            {
                return await RestClient.ReplaceModulePropertiesAsync(deviceId, moduleName, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace module properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="body"> Module properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Replace all property values of a module. </remarks>
        public virtual Response<IReadOnlyDictionary<string, object>> ReplaceModuleProperties(string deviceId, string moduleName, IDictionary<string, object> body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ReplaceModuleProperties");
            scope.Start();
            try
            {
                return RestClient.ReplaceModuleProperties(deviceId, moduleName, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update module properties via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="body"> Module properties patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update property values of a module. </remarks>
        public virtual async Task<Response<IReadOnlyDictionary<string, object>>> UpdateModulePropertiesAsync(string deviceId, string moduleName, object body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.UpdateModuleProperties");
            scope.Start();
            try
            {
                return await RestClient.UpdateModulePropertiesAsync(deviceId, moduleName, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update module properties via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="body"> Module properties patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update property values of a module. </remarks>
        public virtual Response<IReadOnlyDictionary<string, object>> UpdateModuleProperties(string deviceId, string moduleName, object body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.UpdateModuleProperties");
            scope.Start();
            try
            {
                return RestClient.UpdateModuleProperties(deviceId, moduleName, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get module telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the last telemetry value from a module. </remarks>
        public virtual async Task<Response<DeviceTelemetry>> GetModuleTelemetryValueAsync(string deviceId, string moduleName, string telemetryName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleTelemetryValue");
            scope.Start();
            try
            {
                return await RestClient.GetModuleTelemetryValueAsync(deviceId, moduleName, telemetryName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get module telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the last telemetry value from a module. </remarks>
        public virtual Response<DeviceTelemetry> GetModuleTelemetryValue(string deviceId, string moduleName, string telemetryName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleTelemetryValue");
            scope.Start();
            try
            {
                return RestClient.GetModuleTelemetryValue(deviceId, moduleName, telemetryName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get all property values of a device by device ID. </remarks>
        public virtual async Task<Response<IReadOnlyDictionary<string, object>>> GetPropertiesAsync(string deviceId, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetProperties");
            scope.Start();
            try
            {
                return await RestClient.GetPropertiesAsync(deviceId, unmodeled, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get all property values of a device by device ID. </remarks>
        public virtual Response<IReadOnlyDictionary<string, object>> GetProperties(string deviceId, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetProperties");
            scope.Start();
            try
            {
                return RestClient.GetProperties(deviceId, unmodeled, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace device properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device properties. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Replace all property values of a device by device ID. </remarks>
        public virtual async Task<Response<IReadOnlyDictionary<string, object>>> ReplacePropertiesAsync(string deviceId, IDictionary<string, object> body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ReplaceProperties");
            scope.Start();
            try
            {
                return await RestClient.ReplacePropertiesAsync(deviceId, body, unmodeled, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace device properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device properties. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Replace all property values of a device by device ID. </remarks>
        public virtual Response<IReadOnlyDictionary<string, object>> ReplaceProperties(string deviceId, IDictionary<string, object> body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.ReplaceProperties");
            scope.Start();
            try
            {
                return RestClient.ReplaceProperties(deviceId, body, unmodeled, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update device properties via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device properties patch. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update property values of a device by device ID. </remarks>
        public virtual async Task<Response<IReadOnlyDictionary<string, object>>> UpdatePropertiesAsync(string deviceId, object body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.UpdateProperties");
            scope.Start();
            try
            {
                return await RestClient.UpdatePropertiesAsync(deviceId, body, unmodeled, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update device properties via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device properties patch. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update property values of a device by device ID. </remarks>
        public virtual Response<IReadOnlyDictionary<string, object>> UpdateProperties(string deviceId, object body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.UpdateProperties");
            scope.Start();
            try
            {
                return RestClient.UpdateProperties(deviceId, body, unmodeled, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Given the ID for a device and a relationship ID associated with this device, get the details of the relationship. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get device relationship by ID. </remarks>
        public virtual async Task<Response<DeviceRelationship>> GetRelationshipAsync(string deviceId, string relationshipId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetRelationship");
            scope.Start();
            try
            {
                return await RestClient.GetRelationshipAsync(deviceId, relationshipId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Given the ID for a device and a relationship ID associated with this device, get the details of the relationship. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get device relationship by ID. </remarks>
        public virtual Response<DeviceRelationship> GetRelationship(string deviceId, string relationshipId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetRelationship");
            scope.Start();
            try
            {
                return RestClient.GetRelationship(deviceId, relationshipId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Given the ID for a device and a relationship ID associated with this device, create a new relationship for between the given device and a second device specified in the body. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="body"> Device relationship body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a device relationship. </remarks>
        public virtual async Task<Response<DeviceRelationship>> CreateRelationshipAsync(string deviceId, string relationshipId, DeviceRelationship body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.CreateRelationship");
            scope.Start();
            try
            {
                return await RestClient.CreateRelationshipAsync(deviceId, relationshipId, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Given the ID for a device and a relationship ID associated with this device, create a new relationship for between the given device and a second device specified in the body. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="body"> Device relationship body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a device relationship. </remarks>
        public virtual Response<DeviceRelationship> CreateRelationship(string deviceId, string relationshipId, DeviceRelationship body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.CreateRelationship");
            scope.Start();
            try
            {
                return RestClient.CreateRelationship(deviceId, relationshipId, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Patch a given relationship given the relationship ID and a given device ID. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="body"> Device relationship patch body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update device relationship. </remarks>
        public virtual async Task<Response<DeviceRelationship>> UpdateRelationshipAsync(string deviceId, string relationshipId, object body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.UpdateRelationship");
            scope.Start();
            try
            {
                return await RestClient.UpdateRelationshipAsync(deviceId, relationshipId, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Patch a given relationship given the relationship ID and a given device ID. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="body"> Device relationship patch body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update device relationship. </remarks>
        public virtual Response<DeviceRelationship> UpdateRelationship(string deviceId, string relationshipId, object body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.UpdateRelationship");
            scope.Start();
            try
            {
                return RestClient.UpdateRelationship(deviceId, relationshipId, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Given the ID for a device and an associated relationship ID, delete the relationship. The given device ID can be that of the upstream or downstream device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete a device relationship. </remarks>
        public virtual async Task<Response> RemoveRelationshipAsync(string deviceId, string relationshipId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.RemoveRelationship");
            scope.Start();
            try
            {
                return await RestClient.RemoveRelationshipAsync(deviceId, relationshipId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Given the ID for a device and an associated relationship ID, delete the relationship. The given device ID can be that of the upstream or downstream device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete a device relationship. </remarks>
        public virtual Response RemoveRelationship(string deviceId, string relationshipId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.RemoveRelationship");
            scope.Start();
            try
            {
                return RestClient.RemoveRelationship(deviceId, relationshipId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the last telemetry value from a device. </remarks>
        public virtual async Task<Response<DeviceTelemetry>> GetTelemetryValueAsync(string deviceId, string telemetryName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetTelemetryValue");
            scope.Start();
            try
            {
                return await RestClient.GetTelemetryValueAsync(deviceId, telemetryName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the last telemetry value from a device. </remarks>
        public virtual Response<DeviceTelemetry> GetTelemetryValue(string deviceId, string telemetryName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetTelemetryValue");
            scope.Start();
            try
            {
                return RestClient.GetTelemetryValue(deviceId, telemetryName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the list of devices in an application with basic ODATA support (maxpagesize, filter, orderby), [more details](https://aka.ms/iotcentralodatasupport). </summary>
        /// <param name="filter"> An expression on the resource type that selects the resources to be returned. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="orderby"> An expression that specify the order of the returned resources. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Device> ListAsync(string filter = null, int? maxpagesize = null, string orderby = null, string expand = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Device>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAsync(filter, maxpagesize, orderby, expand, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Device>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextPageAsync(nextLink, filter, maxpagesize, orderby, expand, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the list of devices in an application with basic ODATA support (maxpagesize, filter, orderby), [more details](https://aka.ms/iotcentralodatasupport). </summary>
        /// <param name="filter"> An expression on the resource type that selects the resources to be returned. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="orderby"> An expression that specify the order of the returned resources. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Device> List(string filter = null, int? maxpagesize = null, string orderby = null, string expand = null, CancellationToken cancellationToken = default)
        {
            Page<Device> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.List");
                scope.Start();
                try
                {
                    var response = RestClient.List(filter, maxpagesize, orderby, expand, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Device> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.List");
                scope.Start();
                try
                {
                    var response = RestClient.ListNextPage(nextLink, filter, maxpagesize, orderby, expand, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get device command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="commandName"/> is null. </exception>
        public virtual AsyncPageable<DeviceCommand> GetCommandHistoryAsync(string deviceId, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            async Task<Page<DeviceCommand>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetCommandHistory");
                scope.Start();
                try
                {
                    var response = await RestClient.GetCommandHistoryAsync(deviceId, commandName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeviceCommand>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetCommandHistory");
                scope.Start();
                try
                {
                    var response = await RestClient.GetCommandHistoryNextPageAsync(nextLink, deviceId, commandName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get device command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="commandName"/> is null. </exception>
        public virtual Pageable<DeviceCommand> GetCommandHistory(string deviceId, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            Page<DeviceCommand> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetCommandHistory");
                scope.Start();
                try
                {
                    var response = RestClient.GetCommandHistory(deviceId, commandName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeviceCommand> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetCommandHistory");
                scope.Start();
                try
                {
                    var response = RestClient.GetCommandHistoryNextPage(nextLink, deviceId, commandName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get component command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="componentName"/> or <paramref name="commandName"/> is null. </exception>
        public virtual AsyncPageable<DeviceCommand> GetComponentCommandHistoryAsync(string deviceId, string componentName, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            async Task<Page<DeviceCommand>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetComponentCommandHistory");
                scope.Start();
                try
                {
                    var response = await RestClient.GetComponentCommandHistoryAsync(deviceId, componentName, commandName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeviceCommand>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetComponentCommandHistory");
                scope.Start();
                try
                {
                    var response = await RestClient.GetComponentCommandHistoryNextPageAsync(nextLink, deviceId, componentName, commandName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get component command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="componentName"/> or <paramref name="commandName"/> is null. </exception>
        public virtual Pageable<DeviceCommand> GetComponentCommandHistory(string deviceId, string componentName, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            Page<DeviceCommand> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetComponentCommandHistory");
                scope.Start();
                try
                {
                    var response = RestClient.GetComponentCommandHistory(deviceId, componentName, commandName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeviceCommand> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetComponentCommandHistory");
                scope.Start();
                try
                {
                    var response = RestClient.GetComponentCommandHistoryNextPage(nextLink, deviceId, componentName, commandName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get module command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="commandName"/> is null. </exception>
        public virtual AsyncPageable<DeviceCommand> GetModuleCommandHistoryAsync(string deviceId, string moduleName, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            async Task<Page<DeviceCommand>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleCommandHistory");
                scope.Start();
                try
                {
                    var response = await RestClient.GetModuleCommandHistoryAsync(deviceId, moduleName, commandName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeviceCommand>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleCommandHistory");
                scope.Start();
                try
                {
                    var response = await RestClient.GetModuleCommandHistoryNextPageAsync(nextLink, deviceId, moduleName, commandName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get module command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="commandName"/> is null. </exception>
        public virtual Pageable<DeviceCommand> GetModuleCommandHistory(string deviceId, string moduleName, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            Page<DeviceCommand> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleCommandHistory");
                scope.Start();
                try
                {
                    var response = RestClient.GetModuleCommandHistory(deviceId, moduleName, commandName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeviceCommand> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleCommandHistory");
                scope.Start();
                try
                {
                    var response = RestClient.GetModuleCommandHistoryNextPage(nextLink, deviceId, moduleName, commandName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get module component command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/> or <paramref name="commandName"/> is null. </exception>
        public virtual AsyncPageable<DeviceCommand> GetModuleComponentCommandHistoryAsync(string deviceId, string moduleName, string componentName, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            async Task<Page<DeviceCommand>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleComponentCommandHistory");
                scope.Start();
                try
                {
                    var response = await RestClient.GetModuleComponentCommandHistoryAsync(deviceId, moduleName, componentName, commandName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeviceCommand>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleComponentCommandHistory");
                scope.Start();
                try
                {
                    var response = await RestClient.GetModuleComponentCommandHistoryNextPageAsync(nextLink, deviceId, moduleName, componentName, commandName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get module component command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/> or <paramref name="commandName"/> is null. </exception>
        public virtual Pageable<DeviceCommand> GetModuleComponentCommandHistory(string deviceId, string moduleName, string componentName, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            Page<DeviceCommand> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleComponentCommandHistory");
                scope.Start();
                try
                {
                    var response = RestClient.GetModuleComponentCommandHistory(deviceId, moduleName, componentName, commandName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeviceCommand> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetModuleComponentCommandHistory");
                scope.Start();
                try
                {
                    var response = RestClient.GetModuleComponentCommandHistoryNextPage(nextLink, deviceId, moduleName, componentName, commandName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Given the ID for an upstream device, will return the upstream and the downstream relationships associated with that gateway. These downstream relationships are only those associated with the direct downstream level (they don’t work recursively). </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        /// <remarks> List all relationships based on device ID. </remarks>
        public virtual AsyncPageable<DeviceRelationship> ListRelationshipsAsync(string deviceId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            async Task<Page<DeviceRelationship>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.ListRelationships");
                scope.Start();
                try
                {
                    var response = await RestClient.ListRelationshipsAsync(deviceId, maxpagesize, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeviceRelationship>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.ListRelationships");
                scope.Start();
                try
                {
                    var response = await RestClient.ListRelationshipsNextPageAsync(nextLink, deviceId, maxpagesize, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Given the ID for an upstream device, will return the upstream and the downstream relationships associated with that gateway. These downstream relationships are only those associated with the direct downstream level (they don’t work recursively). </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        /// <remarks> List all relationships based on device ID. </remarks>
        public virtual Pageable<DeviceRelationship> ListRelationships(string deviceId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            Page<DeviceRelationship> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.ListRelationships");
                scope.Start();
                try
                {
                    var response = RestClient.ListRelationships(deviceId, maxpagesize, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeviceRelationship> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.ListRelationships");
                scope.Start();
                try
                {
                    var response = RestClient.ListRelationshipsNextPage(nextLink, deviceId, maxpagesize, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
