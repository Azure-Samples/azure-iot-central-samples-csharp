// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    public partial class ScheduledJob : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Etag))
            {
                writer.WritePropertyName("etag");
                writer.WriteStringValue(Etag);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("group");
            writer.WriteStringValue(Group);
            if (Optional.IsDefined(Batch))
            {
                writer.WritePropertyName("batch");
                writer.WriteObjectValue(Batch);
            }
            if (Optional.IsDefined(CancellationThreshold))
            {
                writer.WritePropertyName("cancellationThreshold");
                writer.WriteObjectValue(CancellationThreshold);
            }
            writer.WritePropertyName("data");
            writer.WriteStartArray();
            foreach (var item in Data)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(Organizations))
            {
                writer.WritePropertyName("organizations");
                writer.WriteStartArray();
                foreach (var item in Organizations)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("schedule");
            writer.WriteObjectValue(Schedule);
            if (Optional.IsDefined(Enabled))
            {
                writer.WritePropertyName("enabled");
                writer.WriteBooleanValue(Enabled.Value);
            }
            writer.WriteEndObject();
        }

        internal static ScheduledJob DeserializeScheduledJob(JsonElement element)
        {
            Optional<string> etag = default;
            Optional<string> id = default;
            Optional<string> displayName = default;
            Optional<string> description = default;
            string group = default;
            Optional<JobBatch> batch = default;
            Optional<JobCancellationThreshold> cancellationThreshold = default;
            IList<JobData> data = default;
            Optional<IList<string>> organizations = default;
            JobSchedule schedule = default;
            Optional<bool> enabled = default;
            Optional<bool> completed = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("group"))
                {
                    group = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("batch"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    batch = JobBatch.DeserializeJobBatch(property.Value);
                    continue;
                }
                if (property.NameEquals("cancellationThreshold"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cancellationThreshold = JobCancellationThreshold.DeserializeJobCancellationThreshold(property.Value);
                    continue;
                }
                if (property.NameEquals("data"))
                {
                    List<JobData> array = new List<JobData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(JobData.DeserializeJobData(item));
                    }
                    data = array;
                    continue;
                }
                if (property.NameEquals("organizations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    organizations = array;
                    continue;
                }
                if (property.NameEquals("schedule"))
                {
                    schedule = JobSchedule.DeserializeJobSchedule(property.Value);
                    continue;
                }
                if (property.NameEquals("enabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("completed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    completed = property.Value.GetBoolean();
                    continue;
                }
            }
            return new ScheduledJob(etag.Value, id.Value, displayName.Value, description.Value, group, batch.Value, cancellationThreshold.Value, data, Optional.ToList(organizations), schedule, Optional.ToNullable(enabled), Optional.ToNullable(completed));
        }
    }
}
