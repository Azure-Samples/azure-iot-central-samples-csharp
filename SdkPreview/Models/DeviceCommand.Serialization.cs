// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    public partial class DeviceCommand : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ConnectionTimeout))
            {
                writer.WritePropertyName("connectionTimeout");
                writer.WriteNumberValue(ConnectionTimeout.Value);
            }
            if (Optional.IsDefined(ResponseTimeout))
            {
                writer.WritePropertyName("responseTimeout");
                writer.WriteNumberValue(ResponseTimeout.Value);
            }
            if (Optional.IsDefined(Request))
            {
                writer.WritePropertyName("request");
                writer.WriteObjectValue(Request);
            }
            writer.WriteEndObject();
        }

        internal static DeviceCommand DeserializeDeviceCommand(JsonElement element)
        {
            Optional<string> id = default;
            Optional<int> connectionTimeout = default;
            Optional<int> responseTimeout = default;
            Optional<object> request = default;
            Optional<object> response = default;
            Optional<int> responseCode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("connectionTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    connectionTimeout = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("responseTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    responseTimeout = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("request"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    request = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("response"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    response = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("responseCode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    responseCode = property.Value.GetInt32();
                    continue;
                }
            }
            return new DeviceCommand(id.Value, Optional.ToNullable(connectionTimeout), Optional.ToNullable(responseTimeout), request.Value, response.Value, Optional.ToNullable(responseCode));
        }
    }
}
