// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    /// <summary> The data export definition. </summary>
    public partial class Export : DataExportStatus
    {
        /// <summary> Initializes a new instance of Export. </summary>
        /// <param name="displayName"> Display name of the export. </param>
        /// <param name="enabled"> Toggle to start/stop an export from sending data. </param>
        /// <param name="source"> The type of data to export. </param>
        /// <param name="destinations"> The list of destinations to which the export should send data. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="displayName"/> or <paramref name="destinations"/> is null. </exception>
        public Export(string displayName, bool enabled, DestinationSource source, IEnumerable<DestinationReference> destinations)
        {
            Argument.AssertNotNull(displayName, nameof(displayName));
            Argument.AssertNotNull(destinations, nameof(destinations));

            DisplayName = displayName;
            Enabled = enabled;
            Source = source;
            Enrichments = new ChangeTrackingDictionary<string, Enrichment>();
            Destinations = destinations.ToList();
        }

        /// <summary> Initializes a new instance of Export. </summary>
        /// <param name="status"> Indication of the current health and operation of the export or destination. </param>
        /// <param name="errors"> Errors encountered by the export or destination. </param>
        /// <param name="lastExportTime"> The timestamp of the last message that was sent to the export or destination. </param>
        /// <param name="id"> Unique ID of the export. </param>
        /// <param name="displayName"> Display name of the export. </param>
        /// <param name="enabled"> Toggle to start/stop an export from sending data. </param>
        /// <param name="source"> The type of data to export. </param>
        /// <param name="filter"> Query defining which events from the source should be exported. </param>
        /// <param name="enrichments"> Additional pieces of information to include with each sent message. Data is represented as a set of key/value pairs, where the key is the name of the enrichment that will appear in the output message and the value identifies the data to send. </param>
        /// <param name="destinations"> The list of destinations to which the export should send data. </param>
        internal Export(string status, IReadOnlyList<DataExportError> errors, DateTimeOffset? lastExportTime, string id, string displayName, bool enabled, DestinationSource source, string filter, IDictionary<string, Enrichment> enrichments, IList<DestinationReference> destinations) : base(status, errors, lastExportTime)
        {
            Id = id;
            DisplayName = displayName;
            Enabled = enabled;
            Source = source;
            Filter = filter;
            Enrichments = enrichments;
            Destinations = destinations;
        }

        /// <summary> Unique ID of the export. </summary>
        public string Id { get; }
        /// <summary> Display name of the export. </summary>
        public string DisplayName { get; set; }
        /// <summary> Toggle to start/stop an export from sending data. </summary>
        public bool Enabled { get; set; }
        /// <summary> The type of data to export. </summary>
        public DestinationSource Source { get; set; }
        /// <summary> Query defining which events from the source should be exported. </summary>
        public string Filter { get; set; }
        /// <summary> Additional pieces of information to include with each sent message. Data is represented as a set of key/value pairs, where the key is the name of the enrichment that will appear in the output message and the value identifies the data to send. </summary>
        public IDictionary<string, Enrichment> Enrichments { get; }
        /// <summary> The list of destinations to which the export should send data. </summary>
        public IList<DestinationReference> Destinations { get; }
    }
}
