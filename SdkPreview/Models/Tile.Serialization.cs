// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    public partial class Tile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("displayName");
            writer.WriteStringValue(DisplayName);
            writer.WritePropertyName("configuration");
            writer.WriteObjectValue(Configuration);
            writer.WritePropertyName("height");
            writer.WriteNumberValue(Height);
            writer.WritePropertyName("width");
            writer.WriteNumberValue(Width);
            writer.WritePropertyName("x");
            writer.WriteNumberValue(X);
            writer.WritePropertyName("y");
            writer.WriteNumberValue(Y);
            writer.WriteEndObject();
        }

        internal static Tile DeserializeTile(JsonElement element)
        {
            Optional<string> id = default;
            string displayName = default;
            TileConfiguration configuration = default;
            float height = default;
            float width = default;
            float x = default;
            float y = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("configuration"))
                {
                    configuration = TileConfiguration.DeserializeTileConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("height"))
                {
                    height = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("width"))
                {
                    width = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("x"))
                {
                    x = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("y"))
                {
                    y = property.Value.GetSingle();
                    continue;
                }
            }
            return new Tile(id.Value, displayName, configuration, height, width, x, y);
        }
    }
}
