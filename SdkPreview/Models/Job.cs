// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    /// <summary> The job definition. </summary>
    public partial class Job
    {
        /// <summary> Initializes a new instance of Job. </summary>
        /// <param name="group"> The ID of the device group on which to execute the job. </param>
        /// <param name="data"> The capabilities being updated by the job and the values with which they are being updated. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> or <paramref name="data"/> is null. </exception>
        public Job(string group, IEnumerable<JobData> data)
        {
            Argument.AssertNotNull(group, nameof(group));
            Argument.AssertNotNull(data, nameof(data));

            Group = group;
            Data = data.ToList();
            Organizations = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of Job. </summary>
        /// <param name="id"> Unique ID of the job. </param>
        /// <param name="scheduledJobId"> Id of the scheduled job definition that created this job. </param>
        /// <param name="displayName"> Display name of the job. </param>
        /// <param name="description"> Detailed description of the job. </param>
        /// <param name="group"> The ID of the device group on which to execute the job. </param>
        /// <param name="batch"> The batching configuration for the job. </param>
        /// <param name="cancellationThreshold"> The cancellation threshold for the job. </param>
        /// <param name="data"> The capabilities being updated by the job and the values with which they are being updated. </param>
        /// <param name="start"> The start time of the job. </param>
        /// <param name="end"> The end time of the job. </param>
        /// <param name="progress"> The progress statistics of the job. </param>
        /// <param name="status"> Indicates whether the job is starting, running, etc. </param>
        /// <param name="organizations"> List of organizations of the job, only one organization is supported today, multiple organizations will be supported soon. </param>
        internal Job(string id, string scheduledJobId, string displayName, string description, string group, JobBatch batch, JobCancellationThreshold cancellationThreshold, IList<JobData> data, DateTimeOffset? start, DateTimeOffset? end, JobProgress progress, string status, IList<string> organizations)
        {
            Id = id;
            ScheduledJobId = scheduledJobId;
            DisplayName = displayName;
            Description = description;
            Group = group;
            Batch = batch;
            CancellationThreshold = cancellationThreshold;
            Data = data;
            Start = start;
            End = end;
            Progress = progress;
            Status = status;
            Organizations = organizations;
        }

        /// <summary> Unique ID of the job. </summary>
        public string Id { get; }
        /// <summary> Id of the scheduled job definition that created this job. </summary>
        public string ScheduledJobId { get; set; }
        /// <summary> Display name of the job. </summary>
        public string DisplayName { get; set; }
        /// <summary> Detailed description of the job. </summary>
        public string Description { get; set; }
        /// <summary> The ID of the device group on which to execute the job. </summary>
        public string Group { get; set; }
        /// <summary> The batching configuration for the job. </summary>
        public JobBatch Batch { get; set; }
        /// <summary> The cancellation threshold for the job. </summary>
        public JobCancellationThreshold CancellationThreshold { get; set; }
        /// <summary> The capabilities being updated by the job and the values with which they are being updated. </summary>
        public IList<JobData> Data { get; }
        /// <summary> The start time of the job. </summary>
        public DateTimeOffset? Start { get; }
        /// <summary> The end time of the job. </summary>
        public DateTimeOffset? End { get; }
        /// <summary> The progress statistics of the job. </summary>
        public JobProgress Progress { get; }
        /// <summary> Indicates whether the job is starting, running, etc. </summary>
        public string Status { get; }
        /// <summary> List of organizations of the job, only one organization is supported today, multiple organizations will be supported soon. </summary>
        public IList<string> Organizations { get; }
    }
}
