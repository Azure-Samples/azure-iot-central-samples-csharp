// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    /// <summary> The type of aggregation to be applied on capability data. </summary>
    public readonly partial struct CapabilityAggregateType : IEquatable<CapabilityAggregateType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CapabilityAggregateType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CapabilityAggregateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SumValue = "sum";
        private const string CountValue = "count";
        private const string MaxValue = "max";
        private const string MinValue = "min";
        private const string AvgValue = "avg";

        /// <summary> Sum of the capability data. </summary>
        public static CapabilityAggregateType Sum { get; } = new CapabilityAggregateType(SumValue);
        /// <summary> Count of the capability data. </summary>
        public static CapabilityAggregateType Count { get; } = new CapabilityAggregateType(CountValue);
        /// <summary> Maximum of the capability data. </summary>
        public static CapabilityAggregateType Max { get; } = new CapabilityAggregateType(MaxValue);
        /// <summary> Minimum of the capability data. </summary>
        public static CapabilityAggregateType Min { get; } = new CapabilityAggregateType(MinValue);
        /// <summary> Average of the capability data. </summary>
        public static CapabilityAggregateType Avg { get; } = new CapabilityAggregateType(AvgValue);
        /// <summary> Determines if two <see cref="CapabilityAggregateType"/> values are the same. </summary>
        public static bool operator ==(CapabilityAggregateType left, CapabilityAggregateType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CapabilityAggregateType"/> values are not the same. </summary>
        public static bool operator !=(CapabilityAggregateType left, CapabilityAggregateType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CapabilityAggregateType"/>. </summary>
        public static implicit operator CapabilityAggregateType(string value) => new CapabilityAggregateType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CapabilityAggregateType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CapabilityAggregateType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
