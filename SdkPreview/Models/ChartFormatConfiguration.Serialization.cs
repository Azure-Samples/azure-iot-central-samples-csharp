// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    public partial class ChartFormatConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(XAxisEnabled))
            {
                writer.WritePropertyName("xAxisEnabled");
                writer.WriteBooleanValue(XAxisEnabled.Value);
            }
            if (Optional.IsDefined(YAxisEnabled))
            {
                writer.WritePropertyName("yAxisEnabled");
                writer.WriteBooleanValue(YAxisEnabled.Value);
            }
            if (Optional.IsDefined(LegendEnabled))
            {
                writer.WritePropertyName("legendEnabled");
                writer.WriteBooleanValue(LegendEnabled.Value);
            }
            writer.WriteEndObject();
        }

        internal static ChartFormatConfiguration DeserializeChartFormatConfiguration(JsonElement element)
        {
            Optional<bool> xAxisEnabled = default;
            Optional<bool> yAxisEnabled = default;
            Optional<bool> legendEnabled = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("xAxisEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    xAxisEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("yAxisEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    yAxisEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("legendEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    legendEnabled = property.Value.GetBoolean();
                    continue;
                }
            }
            return new ChartFormatConfiguration(Optional.ToNullable(xAxisEnabled), Optional.ToNullable(yAxisEnabled), Optional.ToNullable(legendEnabled));
        }
    }
}
