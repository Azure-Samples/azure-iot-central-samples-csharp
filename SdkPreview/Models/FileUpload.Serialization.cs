// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    public partial class FileUpload : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Account))
            {
                writer.WritePropertyName("account");
                writer.WriteStringValue(Account);
            }
            writer.WritePropertyName("connectionString");
            writer.WriteStringValue(ConnectionString);
            writer.WritePropertyName("container");
            writer.WriteStringValue(Container);
            if (Optional.IsDefined(SasTtl))
            {
                writer.WritePropertyName("sasTtl");
                writer.WriteStringValue(SasTtl);
            }
            if (Optional.IsDefined(Etag))
            {
                writer.WritePropertyName("etag");
                writer.WriteStringValue(Etag);
            }
            if (Optional.IsDefined(ReadAccess))
            {
                writer.WritePropertyName("readAccess");
                writer.WriteBooleanValue(ReadAccess.Value);
            }
            writer.WriteEndObject();
        }

        internal static FileUpload DeserializeFileUpload(JsonElement element)
        {
            Optional<string> account = default;
            string connectionString = default;
            string container = default;
            Optional<string> sasTtl = default;
            Optional<FileUploadState> state = default;
            Optional<string> etag = default;
            Optional<bool> readAccess = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("account"))
                {
                    account = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("connectionString"))
                {
                    connectionString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("container"))
                {
                    container = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sasTtl"))
                {
                    sasTtl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    state = property.Value.GetString().ToFileUploadState();
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("readAccess"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    readAccess = property.Value.GetBoolean();
                    continue;
                }
            }
            return new FileUpload(account.Value, connectionString, container, sasTtl.Value, Optional.ToNullable(state), etag.Value, Optional.ToNullable(readAccess));
        }
    }
}
