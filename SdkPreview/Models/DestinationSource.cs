// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    /// <summary> The type of data to export. </summary>
    public readonly partial struct DestinationSource : IEquatable<DestinationSource>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DestinationSource"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DestinationSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TelemetryValue = "telemetry";
        private const string PropertiesValue = "properties";
        private const string DeviceLifecycleValue = "deviceLifecycle";
        private const string DeviceTemplateLifecycleValue = "deviceTemplateLifecycle";
        private const string DeviceConnectivityValue = "deviceConnectivity";
        private const string AuditValue = "audit";

        /// <summary> Destination source from device telemetry. </summary>
        public static DestinationSource Telemetry { get; } = new DestinationSource(TelemetryValue);
        /// <summary> Destination source from device properties. </summary>
        public static DestinationSource Properties { get; } = new DestinationSource(PropertiesValue);
        /// <summary> Destination source from device lifecycle. </summary>
        public static DestinationSource DeviceLifecycle { get; } = new DestinationSource(DeviceLifecycleValue);
        /// <summary> Destination source from device template lifecycle. </summary>
        public static DestinationSource DeviceTemplateLifecycle { get; } = new DestinationSource(DeviceTemplateLifecycleValue);
        /// <summary> Destination source from device connectivity. </summary>
        public static DestinationSource DeviceConnectivity { get; } = new DestinationSource(DeviceConnectivityValue);
        /// <summary> Destination source from audit logs. </summary>
        public static DestinationSource Audit { get; } = new DestinationSource(AuditValue);
        /// <summary> Determines if two <see cref="DestinationSource"/> values are the same. </summary>
        public static bool operator ==(DestinationSource left, DestinationSource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DestinationSource"/> values are not the same. </summary>
        public static bool operator !=(DestinationSource left, DestinationSource right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DestinationSource"/>. </summary>
        public static implicit operator DestinationSource(string value) => new DestinationSource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DestinationSource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DestinationSource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
