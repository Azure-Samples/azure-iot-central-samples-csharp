// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    /// <summary> The resolution to aggregate data over for each data point. </summary>
    public readonly partial struct TileTimeRangeResolution : IEquatable<TileTimeRangeResolution>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TileTimeRangeResolution"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TileTimeRangeResolution(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OneMinuteValue = "PT1M";
        private const string FiveMinutesValue = "PT5M";
        private const string TenMinutesValue = "PT10M";
        private const string ThirtyMinutesValue = "PT30M";
        private const string OneHourValue = "PT1H";
        private const string TwelveHoursValue = "PT12H";
        private const string OneDayValue = "P1D";
        private const string OneWeekValue = "P1W";

        /// <summary> 1 Minute. </summary>
        public static TileTimeRangeResolution OneMinute { get; } = new TileTimeRangeResolution(OneMinuteValue);
        /// <summary> 5 Minutes. </summary>
        public static TileTimeRangeResolution FiveMinutes { get; } = new TileTimeRangeResolution(FiveMinutesValue);
        /// <summary> 10 Minutes. </summary>
        public static TileTimeRangeResolution TenMinutes { get; } = new TileTimeRangeResolution(TenMinutesValue);
        /// <summary> 30 Minutes. </summary>
        public static TileTimeRangeResolution ThirtyMinutes { get; } = new TileTimeRangeResolution(ThirtyMinutesValue);
        /// <summary> 1 Hour. </summary>
        public static TileTimeRangeResolution OneHour { get; } = new TileTimeRangeResolution(OneHourValue);
        /// <summary> 12 Hours. </summary>
        public static TileTimeRangeResolution TwelveHours { get; } = new TileTimeRangeResolution(TwelveHoursValue);
        /// <summary> 1 Day. </summary>
        public static TileTimeRangeResolution OneDay { get; } = new TileTimeRangeResolution(OneDayValue);
        /// <summary> 1 Week. </summary>
        public static TileTimeRangeResolution OneWeek { get; } = new TileTimeRangeResolution(OneWeekValue);
        /// <summary> Determines if two <see cref="TileTimeRangeResolution"/> values are the same. </summary>
        public static bool operator ==(TileTimeRangeResolution left, TileTimeRangeResolution right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TileTimeRangeResolution"/> values are not the same. </summary>
        public static bool operator !=(TileTimeRangeResolution left, TileTimeRangeResolution right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TileTimeRangeResolution"/>. </summary>
        public static implicit operator TileTimeRangeResolution(string value) => new TileTimeRangeResolution(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TileTimeRangeResolution other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TileTimeRangeResolution other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
