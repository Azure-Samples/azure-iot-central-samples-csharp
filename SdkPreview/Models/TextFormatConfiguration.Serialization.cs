// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    public partial class TextFormatConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AbbreviateValue))
            {
                writer.WritePropertyName("abbreviateValue");
                writer.WriteBooleanValue(AbbreviateValue.Value);
            }
            if (Optional.IsDefined(DecimalPlaces))
            {
                writer.WritePropertyName("decimalPlaces");
                writer.WriteNumberValue(DecimalPlaces.Value);
            }
            if (Optional.IsDefined(TextSize))
            {
                writer.WritePropertyName("textSize");
                writer.WriteNumberValue(TextSize.Value);
            }
            if (Optional.IsDefined(Unit))
            {
                writer.WritePropertyName("unit");
                writer.WriteStringValue(Unit.Value.ToString());
            }
            if (Optional.IsDefined(WordWrap))
            {
                writer.WritePropertyName("wordWrap");
                writer.WriteBooleanValue(WordWrap.Value);
            }
            writer.WriteEndObject();
        }

        internal static TextFormatConfiguration DeserializeTextFormatConfiguration(JsonElement element)
        {
            Optional<bool> abbreviateValue = default;
            Optional<int> decimalPlaces = default;
            Optional<float> textSize = default;
            Optional<TileTextSizeUnit> unit = default;
            Optional<bool> wordWrap = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("abbreviateValue"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    abbreviateValue = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("decimalPlaces"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    decimalPlaces = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("textSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    textSize = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("unit"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    unit = new TileTextSizeUnit(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("wordWrap"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    wordWrap = property.Value.GetBoolean();
                    continue;
                }
            }
            return new TextFormatConfiguration(Optional.ToNullable(abbreviateValue), Optional.ToNullable(decimalPlaces), Optional.ToNullable(textSize), Optional.ToNullable(unit), Optional.ToNullable(wordWrap));
        }
    }
}
