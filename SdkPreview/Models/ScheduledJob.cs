// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    /// <summary> The scheduled job definition. </summary>
    public partial class ScheduledJob
    {
        /// <summary> Initializes a new instance of ScheduledJob. </summary>
        /// <param name="group"> The ID of the device group on which to execute the scheduled job. </param>
        /// <param name="data"> Data related to the operation being performed by this job. All entries must be of the same type. </param>
        /// <param name="schedule"> The schedule at which to execute the job. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/>, <paramref name="data"/> or <paramref name="schedule"/> is null. </exception>
        public ScheduledJob(string group, IEnumerable<JobData> data, JobSchedule schedule)
        {
            Argument.AssertNotNull(group, nameof(group));
            Argument.AssertNotNull(data, nameof(data));
            Argument.AssertNotNull(schedule, nameof(schedule));

            Group = group;
            Data = data.ToList();
            Organizations = new ChangeTrackingList<string>();
            Schedule = schedule;
        }

        /// <summary> Initializes a new instance of ScheduledJob. </summary>
        /// <param name="etag"> ETag used to prevent conflict in scheduled job updates. </param>
        /// <param name="id"> Unique ID of the scheduled job. </param>
        /// <param name="displayName"> Display name of the scheduled job. </param>
        /// <param name="description"> Detailed description of the scheduled job. </param>
        /// <param name="group"> The ID of the device group on which to execute the scheduled job. </param>
        /// <param name="batch"> The batching configuration for the scheduled job. </param>
        /// <param name="cancellationThreshold"> The cancellation threshold for the scheduled job. </param>
        /// <param name="data"> Data related to the operation being performed by this job. All entries must be of the same type. </param>
        /// <param name="organizations"> List of organizations of the job, only one organization is supported today, multiple organizations will be supported soon. </param>
        /// <param name="schedule"> The schedule at which to execute the job. </param>
        /// <param name="enabled"> Whether the scheduled job is enabled. </param>
        /// <param name="completed"> Whether the scheduled job has completed. </param>
        internal ScheduledJob(string etag, string id, string displayName, string description, string group, JobBatch batch, JobCancellationThreshold cancellationThreshold, IList<JobData> data, IList<string> organizations, JobSchedule schedule, bool? enabled, bool? completed)
        {
            Etag = etag;
            Id = id;
            DisplayName = displayName;
            Description = description;
            Group = group;
            Batch = batch;
            CancellationThreshold = cancellationThreshold;
            Data = data;
            Organizations = organizations;
            Schedule = schedule;
            Enabled = enabled;
            Completed = completed;
        }

        /// <summary> ETag used to prevent conflict in scheduled job updates. </summary>
        public string Etag { get; set; }
        /// <summary> Unique ID of the scheduled job. </summary>
        public string Id { get; }
        /// <summary> Display name of the scheduled job. </summary>
        public string DisplayName { get; set; }
        /// <summary> Detailed description of the scheduled job. </summary>
        public string Description { get; set; }
        /// <summary> The ID of the device group on which to execute the scheduled job. </summary>
        public string Group { get; set; }
        /// <summary> The batching configuration for the scheduled job. </summary>
        public JobBatch Batch { get; set; }
        /// <summary> The cancellation threshold for the scheduled job. </summary>
        public JobCancellationThreshold CancellationThreshold { get; set; }
        /// <summary> Data related to the operation being performed by this job. All entries must be of the same type. </summary>
        public IList<JobData> Data { get; }
        /// <summary> List of organizations of the job, only one organization is supported today, multiple organizations will be supported soon. </summary>
        public IList<string> Organizations { get; }
        /// <summary> The schedule at which to execute the job. </summary>
        public JobSchedule Schedule { get; set; }
        /// <summary> Whether the scheduled job is enabled. </summary>
        public bool? Enabled { get; set; }
        /// <summary> Whether the scheduled job has completed. </summary>
        public bool? Completed { get; }
    }
}
