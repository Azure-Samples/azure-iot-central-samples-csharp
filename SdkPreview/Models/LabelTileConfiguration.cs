// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    /// <summary> Configuration specifying options for a label tile. </summary>
    public partial class LabelTileConfiguration : TileConfiguration
    {
        /// <summary> Initializes a new instance of LabelTileConfiguration. </summary>
        /// <param name="text"> The text to display in the tile. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> is null. </exception>
        public LabelTileConfiguration(string text)
        {
            Argument.AssertNotNull(text, nameof(text));

            Text = text;
            Type = "label";
        }

        /// <summary> Initializes a new instance of LabelTileConfiguration. </summary>
        /// <param name="type"> The type of widget the tile renders. </param>
        /// <param name="text"> The text to display in the tile. </param>
        /// <param name="textSize"> The font size of the text being displayed. </param>
        /// <param name="textSizeUnit"> The unit of size for the text in the tile. </param>
        /// <param name="wordWrap"> Whether to wrap the text being displayed. </param>
        internal LabelTileConfiguration(string type, string text, float? textSize, TileTextSizeUnit? textSizeUnit, bool? wordWrap) : base(type)
        {
            Text = text;
            TextSize = textSize;
            TextSizeUnit = textSizeUnit;
            WordWrap = wordWrap;
            Type = type ?? "label";
        }

        /// <summary> The text to display in the tile. </summary>
        public string Text { get; set; }
        /// <summary> The font size of the text being displayed. </summary>
        public float? TextSize { get; set; }
        /// <summary> The unit of size for the text in the tile. </summary>
        public TileTextSizeUnit? TextSizeUnit { get; set; }
        /// <summary> Whether to wrap the text being displayed. </summary>
        public bool? WordWrap { get; set; }
    }
}
