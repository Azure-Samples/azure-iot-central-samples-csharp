// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    public partial class Export : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("displayName");
            writer.WriteStringValue(DisplayName);
            writer.WritePropertyName("enabled");
            writer.WriteBooleanValue(Enabled);
            writer.WritePropertyName("source");
            writer.WriteStringValue(Source.ToString());
            if (Optional.IsDefined(Filter))
            {
                writer.WritePropertyName("filter");
                writer.WriteStringValue(Filter);
            }
            if (Optional.IsCollectionDefined(Enrichments))
            {
                writer.WritePropertyName("enrichments");
                writer.WriteStartObject();
                foreach (var item in Enrichments)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("destinations");
            writer.WriteStartArray();
            foreach (var item in Destinations)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static Export DeserializeExport(JsonElement element)
        {
            Optional<string> id = default;
            string displayName = default;
            bool enabled = default;
            DestinationSource source = default;
            Optional<string> filter = default;
            Optional<IDictionary<string, Enrichment>> enrichments = default;
            IList<DestinationReference> destinations = default;
            Optional<string> status = default;
            Optional<IReadOnlyList<DataExportError>> errors = default;
            Optional<DateTimeOffset> lastExportTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enabled"))
                {
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("source"))
                {
                    source = new DestinationSource(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("filter"))
                {
                    filter = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enrichments"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, Enrichment> dictionary = new Dictionary<string, Enrichment>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, Enrichment.DeserializeEnrichment(property0.Value));
                    }
                    enrichments = dictionary;
                    continue;
                }
                if (property.NameEquals("destinations"))
                {
                    List<DestinationReference> array = new List<DestinationReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DestinationReference.DeserializeDestinationReference(item));
                    }
                    destinations = array;
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DataExportError> array = new List<DataExportError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataExportError.DeserializeDataExportError(item));
                    }
                    errors = array;
                    continue;
                }
                if (property.NameEquals("lastExportTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastExportTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new Export(status.Value, Optional.ToList(errors), Optional.ToNullable(lastExportTime), id.Value, displayName, enabled, source, filter.Value, Optional.ToDictionary(enrichments), destinations);
        }
    }
}
