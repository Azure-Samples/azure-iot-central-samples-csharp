// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    public partial class TileConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type");
            writer.WriteStringValue(Type);
            writer.WriteEndObject();
        }

        internal static TileConfiguration DeserializeTileConfiguration(JsonElement element)
        {
            if (element.TryGetProperty("type", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "barChart": return BarChartConfiguration.DeserializeBarChartConfiguration(element);
                    case "command": return CommandTileConfiguration.DeserializeCommandTileConfiguration(element);
                    case "dataExplorer": return DataExplorerTileConfiguration.DeserializeDataExplorerTileConfiguration(element);
                    case "deviceCount": return DeviceCountTileConfiguration.DeserializeDeviceCountTileConfiguration(element);
                    case "eventChart": return EventChartConfiguration.DeserializeEventChartConfiguration(element);
                    case "eventHistoryChart": return EventHistoryChartConfiguration.DeserializeEventHistoryChartConfiguration(element);
                    case "externalContent": return ExternalContentTileConfiguration.DeserializeExternalContentTileConfiguration(element);
                    case "heatMapChart": return HeatMapConfiguration.DeserializeHeatMapConfiguration(element);
                    case "image": return ImageTileConfiguration.DeserializeImageTileConfiguration(element);
                    case "kpi": return KpiTileConfiguration.DeserializeKpiTileConfiguration(element);
                    case "label": return LabelTileConfiguration.DeserializeLabelTileConfiguration(element);
                    case "lineChart": return LineChartConfiguration.DeserializeLineChartConfiguration(element);
                    case "lkv": return LkvTileConfiguration.DeserializeLkvTileConfiguration(element);
                    case "mapProperty": return MapPropertyConfiguration.DeserializeMapPropertyConfiguration(element);
                    case "mapTelemetry": return MapTelemetryConfiguration.DeserializeMapTelemetryConfiguration(element);
                    case "markdown": return MarkdownTileConfiguration.DeserializeMarkdownTileConfiguration(element);
                    case "pieChart": return PieChartConfiguration.DeserializePieChartConfiguration(element);
                    case "property": return PropertyTileConfiguration.DeserializePropertyTileConfiguration(element);
                    case "stateChart": return StateChartConfiguration.DeserializeStateChartConfiguration(element);
                    case "stateHistoryChart": return StateHistoryChartConfiguration.DeserializeStateHistoryChartConfiguration(element);
                }
            }
            string type = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
            }
            return new TileConfiguration(type);
        }
    }
}
