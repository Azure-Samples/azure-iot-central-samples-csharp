// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    public partial class ServicePrincipalUser : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("tenantId");
            writer.WriteStringValue(TenantId);
            writer.WritePropertyName("objectId");
            writer.WriteStringValue(ObjectId);
            writer.WritePropertyName("type");
            writer.WriteStringValue(Type);
            writer.WritePropertyName("roles");
            writer.WriteStartArray();
            foreach (var item in Roles)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static ServicePrincipalUser DeserializeServicePrincipalUser(JsonElement element)
        {
            string tenantId = default;
            string objectId = default;
            Optional<string> id = default;
            string type = default;
            IList<RoleAssignment> roles = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tenantId"))
                {
                    tenantId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("objectId"))
                {
                    objectId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("roles"))
                {
                    List<RoleAssignment> array = new List<RoleAssignment>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RoleAssignment.DeserializeRoleAssignment(item));
                    }
                    roles = array;
                    continue;
                }
            }
            return new ServicePrincipalUser(roles, id.Value, type, tenantId, objectId);
        }
    }
}
