// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.Azure.IoTCentral.Preview.Models;

namespace Microsoft.Azure.IoTCentral.Preview
{
    internal partial class DevicesRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _subdomain;
        private readonly string _baseDomain;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of DevicesRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subdomain"> The application subdomain. </param>
        /// <param name="baseDomain"> The base domain for all Azure IoT Central service requests. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="subdomain"/>, <paramref name="baseDomain"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subdomain"/> is an empty string, and was expected to be non-empty. </exception>
        public DevicesRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subdomain, string baseDomain = "azureiotcentral.com", string apiVersion = "2022-10-31-preview")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _subdomain = subdomain ?? throw new ArgumentNullException(nameof(subdomain));
            _baseDomain = baseDomain ?? throw new ArgumentNullException(nameof(baseDomain));
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateListRequest(string filter, int? maxpagesize, string orderby, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            if (orderby != null)
            {
                uri.AppendQuery("orderby", orderby, true);
            }
            if (expand != null)
            {
                uri.AppendQuery("expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the list of devices in an application with basic ODATA support (maxpagesize, filter, orderby), [more details](https://aka.ms/iotcentralodatasupport). </summary>
        /// <param name="filter"> An expression on the resource type that selects the resources to be returned. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="orderby"> An expression that specify the order of the returned resources. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<DeviceCollection>> ListAsync(string filter = null, int? maxpagesize = null, string orderby = null, string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(filter, maxpagesize, orderby, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCollection.DeserializeDeviceCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the list of devices in an application with basic ODATA support (maxpagesize, filter, orderby), [more details](https://aka.ms/iotcentralodatasupport). </summary>
        /// <param name="filter"> An expression on the resource type that selects the resources to be returned. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="orderby"> An expression that specify the order of the returned resources. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DeviceCollection> List(string filter = null, int? maxpagesize = null, string orderby = null, string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(filter, maxpagesize, orderby, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCollection.DeserializeDeviceCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string deviceId, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (expand != null)
            {
                uri.AppendQuery("expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a device by ID. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        /// <remarks> Get details about an existing device by device ID. </remarks>
        public async Task<Response<Device>> GetAsync(string deviceId, string expand = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateGetRequest(deviceId, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Device value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Device.DeserializeDevice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a device by ID. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        /// <remarks> Get details about an existing device by device ID. </remarks>
        public Response<Device> Get(string deviceId, string expand = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateGetRequest(deviceId, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Device value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Device.DeserializeDevice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateRequest(string deviceId, Device body, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (expand != null)
            {
                uri.AppendQuery("expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create or update a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device body. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Create a new device. </remarks>
        public async Task<Response<Device>> CreateAsync(string deviceId, Device body, string expand = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateRequest(deviceId, body, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Device value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Device.DeserializeDevice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create or update a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device body. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Create a new device. </remarks>
        public Response<Device> Create(string deviceId, Device body, string expand = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateRequest(deviceId, body, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Device value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Device.DeserializeDevice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRequest(string deviceId, object body, string expand, string ifMatch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (expand != null)
            {
                uri.AppendQuery("expand", expand, true);
            }
            request.Uri = uri;
            if (ifMatch != null)
            {
                request.Headers.Add("If-Match", ifMatch);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update a device via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device patch body. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="ifMatch"> Only perform the operation if the entity&apos;s etag matches one of the etags provided or * is provided. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update an existing device by ID. </remarks>
        public async Task<Response<Device>> UpdateAsync(string deviceId, object body, string expand = null, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateRequest(deviceId, body, expand, ifMatch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Device value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Device.DeserializeDevice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a device via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device patch body. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="ifMatch"> Only perform the operation if the entity&apos;s etag matches one of the etags provided or * is provided. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update an existing device by ID. </remarks>
        public Response<Device> Update(string deviceId, object body, string expand = null, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateRequest(deviceId, body, expand, ifMatch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Device value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Device.DeserializeDevice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveRequest(string deviceId, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (expand != null)
            {
                uri.AppendQuery("expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        /// <remarks> Delete an existing device by device ID. </remarks>
        public async Task<Response> RemoveAsync(string deviceId, string expand = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateRemoveRequest(deviceId, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        /// <remarks> Delete an existing device by device ID. </remarks>
        public Response Remove(string deviceId, string expand = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateRemoveRequest(deviceId, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateApplyManifestRequest(string deviceId, DeploymentManifest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/applyDeploymentManifest", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Apply a deployment manifest to an edge device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Deployment Manifest data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response<DeploymentManifest>> ApplyManifestAsync(string deviceId, DeploymentManifest body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateApplyManifestRequest(deviceId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeploymentManifest value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeploymentManifest.DeserializeDeploymentManifest(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Apply a deployment manifest to an edge device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Deployment Manifest data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        public Response<DeploymentManifest> ApplyManifest(string deviceId, DeploymentManifest body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateApplyManifestRequest(deviceId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeploymentManifest value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeploymentManifest.DeserializeDeploymentManifest(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAttestationRequest(string deviceId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/attestation", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get device attestation. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        public async Task<Response<Attestation>> GetAttestationAsync(string deviceId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateGetAttestationRequest(deviceId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Attestation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Attestation.DeserializeAttestation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get device attestation. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        public Response<Attestation> GetAttestation(string deviceId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateGetAttestationRequest(deviceId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Attestation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Attestation.DeserializeAttestation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateAttestationRequest(string deviceId, Attestation body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/attestation", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create an individual device attestation. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Individual device attestation body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response<Attestation>> CreateAttestationAsync(string deviceId, Attestation body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateAttestationRequest(deviceId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Attestation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Attestation.DeserializeAttestation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create an individual device attestation. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Individual device attestation body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        public Response<Attestation> CreateAttestation(string deviceId, Attestation body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateAttestationRequest(deviceId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Attestation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Attestation.DeserializeAttestation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateAttestationRequest(string deviceId, object body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/attestation", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update an individual device attestation via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Individual device attestation patch body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response<Attestation>> UpdateAttestationAsync(string deviceId, object body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateAttestationRequest(deviceId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Attestation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Attestation.DeserializeAttestation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update an individual device attestation via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Individual device attestation patch body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        public Response<Attestation> UpdateAttestation(string deviceId, object body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateAttestationRequest(deviceId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Attestation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Attestation.DeserializeAttestation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveAttestationRequest(string deviceId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/attestation", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Remove an individual device attestation. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        public async Task<Response> RemoveAttestationAsync(string deviceId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateRemoveAttestationRequest(deviceId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove an individual device attestation. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        public Response RemoveAttestation(string deviceId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateRemoveAttestationRequest(deviceId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCommandHistoryRequest(string deviceId, string commandName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/commands/", false);
            uri.AppendPath(commandName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get device command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="commandName"/> is null. </exception>
        public async Task<Response<DeviceCommandCollection>> GetCommandHistoryAsync(string deviceId, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetCommandHistoryRequest(deviceId, commandName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get device command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="commandName"/> is null. </exception>
        public Response<DeviceCommandCollection> GetCommandHistory(string deviceId, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetCommandHistoryRequest(deviceId, commandName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRunCommandRequest(string deviceId, string commandName, DeviceCommand body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/commands/", false);
            uri.AppendPath(commandName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Run a device command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="commandName"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Run a command on a device. </remarks>
        public async Task<Response<DeviceCommand>> RunCommandAsync(string deviceId, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateRunCommandRequest(deviceId, commandName, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        DeviceCommand value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCommand.DeserializeDeviceCommand(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Run a device command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="commandName"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Run a command on a device. </remarks>
        public Response<DeviceCommand> RunCommand(string deviceId, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateRunCommandRequest(deviceId, commandName, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        DeviceCommand value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCommand.DeserializeDeviceCommand(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListComponentsRequest(string deviceId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/components", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List the components present in a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        public async Task<Response<Collection>> ListComponentsAsync(string deviceId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateListComponentsRequest(deviceId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Collection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Collection.DeserializeCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List the components present in a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        public Response<Collection> ListComponents(string deviceId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateListComponentsRequest(deviceId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Collection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Collection.DeserializeCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetComponentCommandHistoryRequest(string deviceId, string componentName, string commandName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentName, true);
            uri.AppendPath("/commands/", false);
            uri.AppendPath(commandName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get component command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="componentName"/> or <paramref name="commandName"/> is null. </exception>
        public async Task<Response<DeviceCommandCollection>> GetComponentCommandHistoryAsync(string deviceId, string componentName, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetComponentCommandHistoryRequest(deviceId, componentName, commandName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get component command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="componentName"/> or <paramref name="commandName"/> is null. </exception>
        public Response<DeviceCommandCollection> GetComponentCommandHistory(string deviceId, string componentName, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetComponentCommandHistoryRequest(deviceId, componentName, commandName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRunComponentCommandRequest(string deviceId, string componentName, string commandName, DeviceCommand body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentName, true);
            uri.AppendPath("/commands/", false);
            uri.AppendPath(commandName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Run a component command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="componentName"/>, <paramref name="commandName"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Run a command on a component. </remarks>
        public async Task<Response<DeviceCommand>> RunComponentCommandAsync(string deviceId, string componentName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateRunComponentCommandRequest(deviceId, componentName, commandName, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        DeviceCommand value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCommand.DeserializeDeviceCommand(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Run a component command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="componentName"/>, <paramref name="commandName"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Run a command on a component. </remarks>
        public Response<DeviceCommand> RunComponentCommand(string deviceId, string componentName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateRunComponentCommandRequest(deviceId, componentName, commandName, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        DeviceCommand value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCommand.DeserializeDeviceCommand(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetComponentPropertiesRequest(string deviceId, string componentName, bool? unmodeled)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentName, true);
            uri.AppendPath("/properties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (unmodeled != null)
            {
                uri.AppendQuery("unmodeled", unmodeled.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get device properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="componentName"/> is null. </exception>
        public async Task<Response<IReadOnlyDictionary<string, object>>> GetComponentPropertiesAsync(string deviceId, string componentName, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }

            using var message = CreateGetComponentPropertiesRequest(deviceId, componentName, unmodeled);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get device properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="componentName"/> is null. </exception>
        public Response<IReadOnlyDictionary<string, object>> GetComponentProperties(string deviceId, string componentName, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }

            using var message = CreateGetComponentPropertiesRequest(deviceId, componentName, unmodeled);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateReplaceComponentPropertiesRequest(string deviceId, string componentName, IDictionary<string, object> body, bool? unmodeled)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentName, true);
            uri.AppendPath("/properties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (unmodeled != null)
            {
                uri.AppendQuery("unmodeled", unmodeled.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartObject();
            foreach (var item in body)
            {
                content.JsonWriter.WritePropertyName(item.Key);
                content.JsonWriter.WriteObjectValue(item.Value);
            }
            content.JsonWriter.WriteEndObject();
            request.Content = content;
            return message;
        }

        /// <summary> Replace device properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Device properties. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="componentName"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response<IReadOnlyDictionary<string, object>>> ReplaceComponentPropertiesAsync(string deviceId, string componentName, IDictionary<string, object> body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateReplaceComponentPropertiesRequest(deviceId, componentName, body, unmodeled);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Replace device properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Device properties. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="componentName"/> or <paramref name="body"/> is null. </exception>
        public Response<IReadOnlyDictionary<string, object>> ReplaceComponentProperties(string deviceId, string componentName, IDictionary<string, object> body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateReplaceComponentPropertiesRequest(deviceId, componentName, body, unmodeled);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateComponentPropertiesRequest(string deviceId, string componentName, object body, bool? unmodeled)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentName, true);
            uri.AppendPath("/properties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (unmodeled != null)
            {
                uri.AppendQuery("unmodeled", unmodeled.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update device properties for a specific component via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Device properties patch. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="componentName"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response<IReadOnlyDictionary<string, object>>> UpdateComponentPropertiesAsync(string deviceId, string componentName, object body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateComponentPropertiesRequest(deviceId, componentName, body, unmodeled);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update device properties for a specific component via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Device properties patch. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="componentName"/> or <paramref name="body"/> is null. </exception>
        public Response<IReadOnlyDictionary<string, object>> UpdateComponentProperties(string deviceId, string componentName, object body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateComponentPropertiesRequest(deviceId, componentName, body, unmodeled);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetComponentTelemetryValueRequest(string deviceId, string componentName, string telemetryName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentName, true);
            uri.AppendPath("/telemetry/", false);
            uri.AppendPath(telemetryName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get component telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="componentName"/> or <paramref name="telemetryName"/> is null. </exception>
        /// <remarks> Get the last telemetry value from a component. </remarks>
        public async Task<Response<DeviceTelemetry>> GetComponentTelemetryValueAsync(string deviceId, string componentName, string telemetryName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (telemetryName == null)
            {
                throw new ArgumentNullException(nameof(telemetryName));
            }

            using var message = CreateGetComponentTelemetryValueRequest(deviceId, componentName, telemetryName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceTelemetry value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceTelemetry.DeserializeDeviceTelemetry(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get component telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="componentName"/> or <paramref name="telemetryName"/> is null. </exception>
        /// <remarks> Get the last telemetry value from a component. </remarks>
        public Response<DeviceTelemetry> GetComponentTelemetryValue(string deviceId, string componentName, string telemetryName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (telemetryName == null)
            {
                throw new ArgumentNullException(nameof(telemetryName));
            }

            using var message = CreateGetComponentTelemetryValueRequest(deviceId, componentName, telemetryName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceTelemetry value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceTelemetry.DeserializeDeviceTelemetry(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCredentialsRequest(string deviceId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/credentials", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get device credentials. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        public async Task<Response<DeviceCredentials>> GetCredentialsAsync(string deviceId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateGetCredentialsRequest(deviceId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCredentials value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCredentials.DeserializeDeviceCredentials(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get device credentials. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        public Response<DeviceCredentials> GetCredentials(string deviceId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateGetCredentialsRequest(deviceId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCredentials value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCredentials.DeserializeDeviceCredentials(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListModulesRequest(string deviceId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List the modules present in a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        public async Task<Response<Collection>> ListModulesAsync(string deviceId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateListModulesRequest(deviceId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Collection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Collection.DeserializeCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List the modules present in a device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        public Response<Collection> ListModules(string deviceId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateListModulesRequest(deviceId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Collection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Collection.DeserializeCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetModuleCommandHistoryRequest(string deviceId, string moduleName, string commandName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleName, true);
            uri.AppendPath("/commands/", false);
            uri.AppendPath(commandName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get module command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="commandName"/> is null. </exception>
        public async Task<Response<DeviceCommandCollection>> GetModuleCommandHistoryAsync(string deviceId, string moduleName, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetModuleCommandHistoryRequest(deviceId, moduleName, commandName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get module command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="commandName"/> is null. </exception>
        public Response<DeviceCommandCollection> GetModuleCommandHistory(string deviceId, string moduleName, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetModuleCommandHistoryRequest(deviceId, moduleName, commandName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRunModuleCommandRequest(string deviceId, string moduleName, string commandName, DeviceCommand body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleName, true);
            uri.AppendPath("/commands/", false);
            uri.AppendPath(commandName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Run a module command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="commandName"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Run a command on a module. </remarks>
        public async Task<Response<DeviceCommand>> RunModuleCommandAsync(string deviceId, string moduleName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateRunModuleCommandRequest(deviceId, moduleName, commandName, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        DeviceCommand value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCommand.DeserializeDeviceCommand(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Run a module command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="commandName"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Run a command on a module. </remarks>
        public Response<DeviceCommand> RunModuleCommand(string deviceId, string moduleName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateRunModuleCommandRequest(deviceId, moduleName, commandName, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        DeviceCommand value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCommand.DeserializeDeviceCommand(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListModuleComponentsRequest(string deviceId, string moduleName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleName, true);
            uri.AppendPath("/components", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List the components present in a module. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="moduleName"/> is null. </exception>
        public async Task<Response<Collection>> ListModuleComponentsAsync(string deviceId, string moduleName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }

            using var message = CreateListModuleComponentsRequest(deviceId, moduleName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Collection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Collection.DeserializeCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List the components present in a module. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="moduleName"/> is null. </exception>
        public Response<Collection> ListModuleComponents(string deviceId, string moduleName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }

            using var message = CreateListModuleComponentsRequest(deviceId, moduleName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Collection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Collection.DeserializeCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetModuleComponentCommandHistoryRequest(string deviceId, string moduleName, string componentName, string commandName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleName, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentName, true);
            uri.AppendPath("/commands/", false);
            uri.AppendPath(commandName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get module component command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/> or <paramref name="commandName"/> is null. </exception>
        public async Task<Response<DeviceCommandCollection>> GetModuleComponentCommandHistoryAsync(string deviceId, string moduleName, string componentName, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetModuleComponentCommandHistoryRequest(deviceId, moduleName, componentName, commandName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get module component command history. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/> or <paramref name="commandName"/> is null. </exception>
        public Response<DeviceCommandCollection> GetModuleComponentCommandHistory(string deviceId, string moduleName, string componentName, string commandName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetModuleComponentCommandHistoryRequest(deviceId, moduleName, componentName, commandName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRunModuleComponentCommandRequest(string deviceId, string moduleName, string componentName, string commandName, DeviceCommand body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleName, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentName, true);
            uri.AppendPath("/commands/", false);
            uri.AppendPath(commandName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Run a module component command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/>, <paramref name="commandName"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Run a command on a module. </remarks>
        public async Task<Response<DeviceCommand>> RunModuleComponentCommandAsync(string deviceId, string moduleName, string componentName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateRunModuleComponentCommandRequest(deviceId, moduleName, componentName, commandName, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        DeviceCommand value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCommand.DeserializeDeviceCommand(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Run a module component command. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="body"> Device command body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/>, <paramref name="commandName"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Run a command on a module. </remarks>
        public Response<DeviceCommand> RunModuleComponentCommand(string deviceId, string moduleName, string componentName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateRunModuleComponentCommandRequest(deviceId, moduleName, componentName, commandName, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        DeviceCommand value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCommand.DeserializeDeviceCommand(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetModuleComponentPropertiesRequest(string deviceId, string moduleName, string componentName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleName, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentName, true);
            uri.AppendPath("/properties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get module properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="componentName"/> is null. </exception>
        public async Task<Response<IReadOnlyDictionary<string, object>>> GetModuleComponentPropertiesAsync(string deviceId, string moduleName, string componentName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }

            using var message = CreateGetModuleComponentPropertiesRequest(deviceId, moduleName, componentName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get module properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="componentName"/> is null. </exception>
        public Response<IReadOnlyDictionary<string, object>> GetModuleComponentProperties(string deviceId, string moduleName, string componentName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }

            using var message = CreateGetModuleComponentPropertiesRequest(deviceId, moduleName, componentName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateReplaceModuleComponentPropertiesRequest(string deviceId, string moduleName, string componentName, IDictionary<string, object> body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleName, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentName, true);
            uri.AppendPath("/properties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartObject();
            foreach (var item in body)
            {
                content.JsonWriter.WritePropertyName(item.Key);
                content.JsonWriter.WriteObjectValue(item.Value);
            }
            content.JsonWriter.WriteEndObject();
            request.Content = content;
            return message;
        }

        /// <summary> Replace module properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Module properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response<IReadOnlyDictionary<string, object>>> ReplaceModuleComponentPropertiesAsync(string deviceId, string moduleName, string componentName, IDictionary<string, object> body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateReplaceModuleComponentPropertiesRequest(deviceId, moduleName, componentName, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Replace module properties for a specific component. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Module properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/> or <paramref name="body"/> is null. </exception>
        public Response<IReadOnlyDictionary<string, object>> ReplaceModuleComponentProperties(string deviceId, string moduleName, string componentName, IDictionary<string, object> body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateReplaceModuleComponentPropertiesRequest(deviceId, moduleName, componentName, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateModuleComponentPropertiesRequest(string deviceId, string moduleName, string componentName, object body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleName, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentName, true);
            uri.AppendPath("/properties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update module properties for a specific component via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Module properties patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response<IReadOnlyDictionary<string, object>>> UpdateModuleComponentPropertiesAsync(string deviceId, string moduleName, string componentName, object body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateModuleComponentPropertiesRequest(deviceId, moduleName, componentName, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update module properties for a specific component via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="body"> Module properties patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/> or <paramref name="body"/> is null. </exception>
        public Response<IReadOnlyDictionary<string, object>> UpdateModuleComponentProperties(string deviceId, string moduleName, string componentName, object body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateModuleComponentPropertiesRequest(deviceId, moduleName, componentName, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetModuleComponentTelemetryValueRequest(string deviceId, string moduleName, string componentName, string telemetryName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleName, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentName, true);
            uri.AppendPath("/telemetry/", false);
            uri.AppendPath(telemetryName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get module component telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/> or <paramref name="telemetryName"/> is null. </exception>
        /// <remarks> Get the last telemetry value from a module component. </remarks>
        public async Task<Response<DeviceTelemetry>> GetModuleComponentTelemetryValueAsync(string deviceId, string moduleName, string componentName, string telemetryName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (telemetryName == null)
            {
                throw new ArgumentNullException(nameof(telemetryName));
            }

            using var message = CreateGetModuleComponentTelemetryValueRequest(deviceId, moduleName, componentName, telemetryName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceTelemetry value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceTelemetry.DeserializeDeviceTelemetry(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get module component telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/> or <paramref name="telemetryName"/> is null. </exception>
        /// <remarks> Get the last telemetry value from a module component. </remarks>
        public Response<DeviceTelemetry> GetModuleComponentTelemetryValue(string deviceId, string moduleName, string componentName, string telemetryName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (telemetryName == null)
            {
                throw new ArgumentNullException(nameof(telemetryName));
            }

            using var message = CreateGetModuleComponentTelemetryValueRequest(deviceId, moduleName, componentName, telemetryName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceTelemetry value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceTelemetry.DeserializeDeviceTelemetry(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetModulePropertiesRequest(string deviceId, string moduleName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleName, true);
            uri.AppendPath("/properties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get module properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="moduleName"/> is null. </exception>
        /// <remarks> Get all property values of a module. </remarks>
        public async Task<Response<IReadOnlyDictionary<string, object>>> GetModulePropertiesAsync(string deviceId, string moduleName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }

            using var message = CreateGetModulePropertiesRequest(deviceId, moduleName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get module properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="moduleName"/> is null. </exception>
        /// <remarks> Get all property values of a module. </remarks>
        public Response<IReadOnlyDictionary<string, object>> GetModuleProperties(string deviceId, string moduleName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }

            using var message = CreateGetModulePropertiesRequest(deviceId, moduleName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateReplaceModulePropertiesRequest(string deviceId, string moduleName, IDictionary<string, object> body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleName, true);
            uri.AppendPath("/properties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartObject();
            foreach (var item in body)
            {
                content.JsonWriter.WritePropertyName(item.Key);
                content.JsonWriter.WriteObjectValue(item.Value);
            }
            content.JsonWriter.WriteEndObject();
            request.Content = content;
            return message;
        }

        /// <summary> Replace module properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="body"> Module properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Replace all property values of a module. </remarks>
        public async Task<Response<IReadOnlyDictionary<string, object>>> ReplaceModulePropertiesAsync(string deviceId, string moduleName, IDictionary<string, object> body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateReplaceModulePropertiesRequest(deviceId, moduleName, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Replace module properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="body"> Module properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Replace all property values of a module. </remarks>
        public Response<IReadOnlyDictionary<string, object>> ReplaceModuleProperties(string deviceId, string moduleName, IDictionary<string, object> body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateReplaceModulePropertiesRequest(deviceId, moduleName, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateModulePropertiesRequest(string deviceId, string moduleName, object body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleName, true);
            uri.AppendPath("/properties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update module properties via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="body"> Module properties patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update property values of a module. </remarks>
        public async Task<Response<IReadOnlyDictionary<string, object>>> UpdateModulePropertiesAsync(string deviceId, string moduleName, object body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateModulePropertiesRequest(deviceId, moduleName, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update module properties via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="body"> Module properties patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update property values of a module. </remarks>
        public Response<IReadOnlyDictionary<string, object>> UpdateModuleProperties(string deviceId, string moduleName, object body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateModulePropertiesRequest(deviceId, moduleName, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetModuleTelemetryValueRequest(string deviceId, string moduleName, string telemetryName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleName, true);
            uri.AppendPath("/telemetry/", false);
            uri.AppendPath(telemetryName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get module telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="telemetryName"/> is null. </exception>
        /// <remarks> Get the last telemetry value from a module. </remarks>
        public async Task<Response<DeviceTelemetry>> GetModuleTelemetryValueAsync(string deviceId, string moduleName, string telemetryName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (telemetryName == null)
            {
                throw new ArgumentNullException(nameof(telemetryName));
            }

            using var message = CreateGetModuleTelemetryValueRequest(deviceId, moduleName, telemetryName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceTelemetry value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceTelemetry.DeserializeDeviceTelemetry(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get module telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="telemetryName"/> is null. </exception>
        /// <remarks> Get the last telemetry value from a module. </remarks>
        public Response<DeviceTelemetry> GetModuleTelemetryValue(string deviceId, string moduleName, string telemetryName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (telemetryName == null)
            {
                throw new ArgumentNullException(nameof(telemetryName));
            }

            using var message = CreateGetModuleTelemetryValueRequest(deviceId, moduleName, telemetryName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceTelemetry value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceTelemetry.DeserializeDeviceTelemetry(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPropertiesRequest(string deviceId, bool? unmodeled)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/properties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (unmodeled != null)
            {
                uri.AppendQuery("unmodeled", unmodeled.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get device properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        /// <remarks> Get all property values of a device by device ID. </remarks>
        public async Task<Response<IReadOnlyDictionary<string, object>>> GetPropertiesAsync(string deviceId, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateGetPropertiesRequest(deviceId, unmodeled);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get device properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        /// <remarks> Get all property values of a device by device ID. </remarks>
        public Response<IReadOnlyDictionary<string, object>> GetProperties(string deviceId, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateGetPropertiesRequest(deviceId, unmodeled);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateReplacePropertiesRequest(string deviceId, IDictionary<string, object> body, bool? unmodeled)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/properties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (unmodeled != null)
            {
                uri.AppendQuery("unmodeled", unmodeled.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartObject();
            foreach (var item in body)
            {
                content.JsonWriter.WritePropertyName(item.Key);
                content.JsonWriter.WriteObjectValue(item.Value);
            }
            content.JsonWriter.WriteEndObject();
            request.Content = content;
            return message;
        }

        /// <summary> Replace device properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device properties. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Replace all property values of a device by device ID. </remarks>
        public async Task<Response<IReadOnlyDictionary<string, object>>> ReplacePropertiesAsync(string deviceId, IDictionary<string, object> body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateReplacePropertiesRequest(deviceId, body, unmodeled);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Replace device properties. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device properties. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Replace all property values of a device by device ID. </remarks>
        public Response<IReadOnlyDictionary<string, object>> ReplaceProperties(string deviceId, IDictionary<string, object> body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateReplacePropertiesRequest(deviceId, body, unmodeled);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdatePropertiesRequest(string deviceId, object body, bool? unmodeled)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/properties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (unmodeled != null)
            {
                uri.AppendQuery("unmodeled", unmodeled.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update device properties via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device properties patch. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update property values of a device by device ID. </remarks>
        public async Task<Response<IReadOnlyDictionary<string, object>>> UpdatePropertiesAsync(string deviceId, object body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdatePropertiesRequest(deviceId, body, unmodeled);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update device properties via patch. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="body"> Device properties patch. </param>
        /// <param name="unmodeled"> The query parameter for supporting unmodeled properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update property values of a device by device ID. </remarks>
        public Response<IReadOnlyDictionary<string, object>> UpdateProperties(string deviceId, object body, bool? unmodeled = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdatePropertiesRequest(deviceId, body, unmodeled);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        IReadOnlyDictionary<string, object> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, object> dictionary = new Dictionary<string, object>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetObject());
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListRelationshipsRequest(string deviceId, int? maxpagesize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/relationships", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Given the ID for an upstream device, will return the upstream and the downstream relationships associated with that gateway. These downstream relationships are only those associated with the direct downstream level (they don’t work recursively). </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        /// <remarks> List all relationships based on device ID. </remarks>
        public async Task<Response<DeviceRelationshipCollection>> ListRelationshipsAsync(string deviceId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateListRelationshipsRequest(deviceId, maxpagesize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceRelationshipCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceRelationshipCollection.DeserializeDeviceRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Given the ID for an upstream device, will return the upstream and the downstream relationships associated with that gateway. These downstream relationships are only those associated with the direct downstream level (they don’t work recursively). </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        /// <remarks> List all relationships based on device ID. </remarks>
        public Response<DeviceRelationshipCollection> ListRelationships(string deviceId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateListRelationshipsRequest(deviceId, maxpagesize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceRelationshipCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceRelationshipCollection.DeserializeDeviceRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRelationshipRequest(string deviceId, string relationshipId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/relationships/", false);
            uri.AppendPath(relationshipId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Given the ID for a device and a relationship ID associated with this device, get the details of the relationship. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="relationshipId"/> is null. </exception>
        /// <remarks> Get device relationship by ID. </remarks>
        public async Task<Response<DeviceRelationship>> GetRelationshipAsync(string deviceId, string relationshipId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }

            using var message = CreateGetRelationshipRequest(deviceId, relationshipId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceRelationship value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceRelationship.DeserializeDeviceRelationship(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Given the ID for a device and a relationship ID associated with this device, get the details of the relationship. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="relationshipId"/> is null. </exception>
        /// <remarks> Get device relationship by ID. </remarks>
        public Response<DeviceRelationship> GetRelationship(string deviceId, string relationshipId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }

            using var message = CreateGetRelationshipRequest(deviceId, relationshipId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceRelationship value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceRelationship.DeserializeDeviceRelationship(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateRelationshipRequest(string deviceId, string relationshipId, DeviceRelationship body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/relationships/", false);
            uri.AppendPath(relationshipId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Given the ID for a device and a relationship ID associated with this device, create a new relationship for between the given device and a second device specified in the body. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="body"> Device relationship body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="relationshipId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Create a device relationship. </remarks>
        public async Task<Response<DeviceRelationship>> CreateRelationshipAsync(string deviceId, string relationshipId, DeviceRelationship body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateRelationshipRequest(deviceId, relationshipId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceRelationship value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceRelationship.DeserializeDeviceRelationship(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Given the ID for a device and a relationship ID associated with this device, create a new relationship for between the given device and a second device specified in the body. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="body"> Device relationship body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="relationshipId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Create a device relationship. </remarks>
        public Response<DeviceRelationship> CreateRelationship(string deviceId, string relationshipId, DeviceRelationship body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateRelationshipRequest(deviceId, relationshipId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceRelationship value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceRelationship.DeserializeDeviceRelationship(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRelationshipRequest(string deviceId, string relationshipId, object body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/relationships/", false);
            uri.AppendPath(relationshipId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Patch a given relationship given the relationship ID and a given device ID. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="body"> Device relationship patch body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="relationshipId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update device relationship. </remarks>
        public async Task<Response<DeviceRelationship>> UpdateRelationshipAsync(string deviceId, string relationshipId, object body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateRelationshipRequest(deviceId, relationshipId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceRelationship value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceRelationship.DeserializeDeviceRelationship(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Patch a given relationship given the relationship ID and a given device ID. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="body"> Device relationship patch body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/>, <paramref name="relationshipId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update device relationship. </remarks>
        public Response<DeviceRelationship> UpdateRelationship(string deviceId, string relationshipId, object body, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateRelationshipRequest(deviceId, relationshipId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceRelationship value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceRelationship.DeserializeDeviceRelationship(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveRelationshipRequest(string deviceId, string relationshipId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/relationships/", false);
            uri.AppendPath(relationshipId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Given the ID for a device and an associated relationship ID, delete the relationship. The given device ID can be that of the upstream or downstream device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="relationshipId"/> is null. </exception>
        /// <remarks> Delete a device relationship. </remarks>
        public async Task<Response> RemoveRelationshipAsync(string deviceId, string relationshipId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }

            using var message = CreateRemoveRelationshipRequest(deviceId, relationshipId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Given the ID for a device and an associated relationship ID, delete the relationship. The given device ID can be that of the upstream or downstream device. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="relationshipId"> Unique ID of a relationship between devices. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="relationshipId"/> is null. </exception>
        /// <remarks> Delete a device relationship. </remarks>
        public Response RemoveRelationship(string deviceId, string relationshipId, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }

            using var message = CreateRemoveRelationshipRequest(deviceId, relationshipId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTelemetryValueRequest(string deviceId, string telemetryName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/telemetry/", false);
            uri.AppendPath(telemetryName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get device telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="telemetryName"/> is null. </exception>
        /// <remarks> Get the last telemetry value from a device. </remarks>
        public async Task<Response<DeviceTelemetry>> GetTelemetryValueAsync(string deviceId, string telemetryName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (telemetryName == null)
            {
                throw new ArgumentNullException(nameof(telemetryName));
            }

            using var message = CreateGetTelemetryValueRequest(deviceId, telemetryName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceTelemetry value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceTelemetry.DeserializeDeviceTelemetry(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get device telemetry value. </summary>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="telemetryName"> Name of this device telemetry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="telemetryName"/> is null. </exception>
        /// <remarks> Get the last telemetry value from a device. </remarks>
        public Response<DeviceTelemetry> GetTelemetryValue(string deviceId, string telemetryName, CancellationToken cancellationToken = default)
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (telemetryName == null)
            {
                throw new ArgumentNullException(nameof(telemetryName));
            }

            using var message = CreateGetTelemetryValueRequest(deviceId, telemetryName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceTelemetry value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceTelemetry.DeserializeDeviceTelemetry(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, string filter, int? maxpagesize, string orderby, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the list of devices in an application with basic ODATA support (maxpagesize, filter, orderby), [more details](https://aka.ms/iotcentralodatasupport). </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="filter"> An expression on the resource type that selects the resources to be returned. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="orderby"> An expression that specify the order of the returned resources. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<DeviceCollection>> ListNextPageAsync(string nextLink, string filter = null, int? maxpagesize = null, string orderby = null, string expand = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink, filter, maxpagesize, orderby, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCollection.DeserializeDeviceCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the list of devices in an application with basic ODATA support (maxpagesize, filter, orderby), [more details](https://aka.ms/iotcentralodatasupport). </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="filter"> An expression on the resource type that selects the resources to be returned. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="orderby"> An expression that specify the order of the returned resources. </param>
        /// <param name="expand"> The query parameter for including requested entities in response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<DeviceCollection> ListNextPage(string nextLink, string filter = null, int? maxpagesize = null, string orderby = null, string expand = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink, filter, maxpagesize, orderby, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCollection.DeserializeDeviceCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCommandHistoryNextPageRequest(string nextLink, string deviceId, string commandName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get device command history. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="deviceId"/> or <paramref name="commandName"/> is null. </exception>
        public async Task<Response<DeviceCommandCollection>> GetCommandHistoryNextPageAsync(string nextLink, string deviceId, string commandName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetCommandHistoryNextPageRequest(nextLink, deviceId, commandName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get device command history. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="deviceId"/> or <paramref name="commandName"/> is null. </exception>
        public Response<DeviceCommandCollection> GetCommandHistoryNextPage(string nextLink, string deviceId, string commandName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetCommandHistoryNextPageRequest(nextLink, deviceId, commandName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetComponentCommandHistoryNextPageRequest(string nextLink, string deviceId, string componentName, string commandName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get component command history. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="deviceId"/>, <paramref name="componentName"/> or <paramref name="commandName"/> is null. </exception>
        public async Task<Response<DeviceCommandCollection>> GetComponentCommandHistoryNextPageAsync(string nextLink, string deviceId, string componentName, string commandName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetComponentCommandHistoryNextPageRequest(nextLink, deviceId, componentName, commandName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get component command history. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="deviceId"/>, <paramref name="componentName"/> or <paramref name="commandName"/> is null. </exception>
        public Response<DeviceCommandCollection> GetComponentCommandHistoryNextPage(string nextLink, string deviceId, string componentName, string commandName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetComponentCommandHistoryNextPageRequest(nextLink, deviceId, componentName, commandName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetModuleCommandHistoryNextPageRequest(string nextLink, string deviceId, string moduleName, string commandName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get module command history. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="commandName"/> is null. </exception>
        public async Task<Response<DeviceCommandCollection>> GetModuleCommandHistoryNextPageAsync(string nextLink, string deviceId, string moduleName, string commandName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetModuleCommandHistoryNextPageRequest(nextLink, deviceId, moduleName, commandName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get module command history. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="deviceId"/>, <paramref name="moduleName"/> or <paramref name="commandName"/> is null. </exception>
        public Response<DeviceCommandCollection> GetModuleCommandHistoryNextPage(string nextLink, string deviceId, string moduleName, string commandName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetModuleCommandHistoryNextPageRequest(nextLink, deviceId, moduleName, commandName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetModuleComponentCommandHistoryNextPageRequest(string nextLink, string deviceId, string moduleName, string componentName, string commandName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get module component command history. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/> or <paramref name="commandName"/> is null. </exception>
        public async Task<Response<DeviceCommandCollection>> GetModuleComponentCommandHistoryNextPageAsync(string nextLink, string deviceId, string moduleName, string componentName, string commandName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetModuleComponentCommandHistoryNextPageRequest(nextLink, deviceId, moduleName, componentName, commandName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get module component command history. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="moduleName"> Name of the device module. </param>
        /// <param name="componentName"> Name of the device component. </param>
        /// <param name="commandName"> Name of this device command. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="deviceId"/>, <paramref name="moduleName"/>, <paramref name="componentName"/> or <paramref name="commandName"/> is null. </exception>
        public Response<DeviceCommandCollection> GetModuleComponentCommandHistoryNextPage(string nextLink, string deviceId, string moduleName, string componentName, string commandName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException(nameof(moduleName));
            }
            if (componentName == null)
            {
                throw new ArgumentNullException(nameof(componentName));
            }
            if (commandName == null)
            {
                throw new ArgumentNullException(nameof(commandName));
            }

            using var message = CreateGetModuleComponentCommandHistoryNextPageRequest(nextLink, deviceId, moduleName, componentName, commandName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceCommandCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceCommandCollection.DeserializeDeviceCommandCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListRelationshipsNextPageRequest(string nextLink, string deviceId, int? maxpagesize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Given the ID for an upstream device, will return the upstream and the downstream relationships associated with that gateway. These downstream relationships are only those associated with the direct downstream level (they don’t work recursively). </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="deviceId"/> is null. </exception>
        /// <remarks> List all relationships based on device ID. </remarks>
        public async Task<Response<DeviceRelationshipCollection>> ListRelationshipsNextPageAsync(string nextLink, string deviceId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateListRelationshipsNextPageRequest(nextLink, deviceId, maxpagesize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceRelationshipCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceRelationshipCollection.DeserializeDeviceRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Given the ID for an upstream device, will return the upstream and the downstream relationships associated with that gateway. These downstream relationships are only those associated with the direct downstream level (they don’t work recursively). </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deviceId"> Unique ID of the device. </param>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="deviceId"/> is null. </exception>
        /// <remarks> List all relationships based on device ID. </remarks>
        public Response<DeviceRelationshipCollection> ListRelationshipsNextPage(string nextLink, string deviceId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (deviceId == null)
            {
                throw new ArgumentNullException(nameof(deviceId));
            }

            using var message = CreateListRelationshipsNextPageRequest(nextLink, deviceId, maxpagesize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceRelationshipCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceRelationshipCollection.DeserializeDeviceRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
