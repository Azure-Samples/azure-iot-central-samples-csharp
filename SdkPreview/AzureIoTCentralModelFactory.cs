// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Microsoft.Azure.IoTCentral.Preview.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AzureIoTCentralModelFactory
    {
        /// <summary> Initializes a new instance of ApiToken. </summary>
        /// <param name="roles"> List of role assignments that specify the permissions to access the application. </param>
        /// <param name="id"> Unique ID of the API token. </param>
        /// <param name="token"> Value of the API token. </param>
        /// <param name="expiry"> String-formatted date representing the time when the token expires. </param>
        /// <returns> A new <see cref="Models.ApiToken"/> instance for mocking. </returns>
        public static ApiToken ApiToken(IEnumerable<RoleAssignment> roles = null, string id = null, string token = null, DateTimeOffset? expiry = null)
        {
            roles ??= new List<RoleAssignment>();

            return new ApiToken(roles?.ToList(), id, token, expiry);
        }

        /// <summary> Initializes a new instance of Dashboard. </summary>
        /// <param name="id"> Unique ID of the dashboard. </param>
        /// <param name="displayName"> Display name of the dashboard. </param>
        /// <param name="tiles"> The tiles displayed by the dashboard. </param>
        /// <param name="personal"> Whether the dashboard is personal and can only be viewed by the current user. </param>
        /// <param name="favorite"> Whether the dashboard is favorited or not. </param>
        /// <param name="etag"> Etag to prevent conflict when updating the dashboard. </param>
        /// <param name="organizations"> The organization the dashboard belongs to. If not present, the dashboard is root-level or personal. only one organization is supported today, multiple organizations will be supported soon. </param>
        /// <returns> A new <see cref="Models.Dashboard"/> instance for mocking. </returns>
        public static Dashboard Dashboard(string id = null, string displayName = null, IEnumerable<Tile> tiles = null, bool? personal = null, bool? favorite = null, string etag = null, IEnumerable<string> organizations = null)
        {
            tiles ??= new List<Tile>();
            organizations ??= new List<string>();

            return new Dashboard(id, displayName, tiles?.ToList(), personal, favorite, etag, organizations?.ToList());
        }

        /// <summary> Initializes a new instance of Tile. </summary>
        /// <param name="id"> Unique ID of the tile. </param>
        /// <param name="displayName"> Display name of the tile. </param>
        /// <param name="configuration"> The configuration for the tile. </param>
        /// <param name="height"> Height of the tile. </param>
        /// <param name="width"> Width of the tile. </param>
        /// <param name="x"> Horizontal position of the tile. </param>
        /// <param name="y"> Vertical position of the tile. </param>
        /// <returns> A new <see cref="Models.Tile"/> instance for mocking. </returns>
        public static Tile Tile(string id = null, string displayName = null, TileConfiguration configuration = null, float height = default, float width = default, float x = default, float y = default)
        {
            return new Tile(id, displayName, configuration, height, width, x, y);
        }

        /// <summary> Initializes a new instance of Destination. </summary>
        /// <param name="status"> Indication of the current health and operation of the export or destination. </param>
        /// <param name="errors"> Errors encountered by the export or destination. </param>
        /// <param name="lastExportTime"> The timestamp of the last message that was sent to the export or destination. </param>
        /// <param name="id"> Unique ID of the destination. </param>
        /// <param name="displayName"> Display name of the destination. </param>
        /// <param name="type"> The type of destination configuration. </param>
        /// <returns> A new <see cref="Models.Destination"/> instance for mocking. </returns>
        public static Destination Destination(string status = null, IEnumerable<DataExportError> errors = null, DateTimeOffset? lastExportTime = null, string id = null, string displayName = null, string type = null)
        {
            errors ??= new List<DataExportError>();

            return new Destination(status, errors?.ToList(), lastExportTime, id, displayName, type);
        }

        /// <summary> Initializes a new instance of DataExportStatus. </summary>
        /// <param name="status"> Indication of the current health and operation of the export or destination. </param>
        /// <param name="errors"> Errors encountered by the export or destination. </param>
        /// <param name="lastExportTime"> The timestamp of the last message that was sent to the export or destination. </param>
        /// <returns> A new <see cref="Models.DataExportStatus"/> instance for mocking. </returns>
        public static DataExportStatus DataExportStatus(string status = null, IEnumerable<DataExportError> errors = null, DateTimeOffset? lastExportTime = null)
        {
            errors ??= new List<DataExportError>();

            return new DataExportStatus(status, errors?.ToList(), lastExportTime);
        }

        /// <summary> Initializes a new instance of DataExportError. </summary>
        /// <param name="code"> The code for the error that occurred. </param>
        /// <param name="message"> The description of the error that occurred. </param>
        /// <returns> A new <see cref="Models.DataExportError"/> instance for mocking. </returns>
        public static DataExportError DataExportError(string code = null, string message = null)
        {
            return new DataExportError(code, message);
        }

        /// <summary> Initializes a new instance of Export. </summary>
        /// <param name="status"> Indication of the current health and operation of the export or destination. </param>
        /// <param name="errors"> Errors encountered by the export or destination. </param>
        /// <param name="lastExportTime"> The timestamp of the last message that was sent to the export or destination. </param>
        /// <param name="id"> Unique ID of the export. </param>
        /// <param name="displayName"> Display name of the export. </param>
        /// <param name="enabled"> Toggle to start/stop an export from sending data. </param>
        /// <param name="source"> The type of data to export. </param>
        /// <param name="filter"> Query defining which events from the source should be exported. </param>
        /// <param name="enrichments"> Additional pieces of information to include with each sent message. Data is represented as a set of key/value pairs, where the key is the name of the enrichment that will appear in the output message and the value identifies the data to send. </param>
        /// <param name="destinations"> The list of destinations to which the export should send data. </param>
        /// <returns> A new <see cref="Models.Export"/> instance for mocking. </returns>
        public static Export Export(string status = null, IEnumerable<DataExportError> errors = null, DateTimeOffset? lastExportTime = null, string id = null, string displayName = null, bool enabled = default, DestinationSource source = default, string filter = null, IDictionary<string, Enrichment> enrichments = null, IEnumerable<DestinationReference> destinations = null)
        {
            errors ??= new List<DataExportError>();
            enrichments ??= new Dictionary<string, Enrichment>();
            destinations ??= new List<DestinationReference>();

            return new Export(status, errors?.ToList(), lastExportTime, id, displayName, enabled, source, filter, enrichments, destinations?.ToList());
        }

        /// <summary> Initializes a new instance of DeploymentManifest. </summary>
        /// <param name="id"> Unique ID of the deployment manifest. </param>
        /// <param name="displayName"> Display name of the deployment manifest. </param>
        /// <param name="data"> Content of the the deployment manifest. </param>
        /// <param name="etag"> Etag to prevent conflict when updating the deployment manifest. </param>
        /// <param name="organizations"> The organization that deployment manifest belongs to. If not present, the deployment manifest is root-level or personal. Only one organization is supported today, multiple organizations will be supported soon. </param>
        /// <returns> A new <see cref="Models.DeploymentManifest"/> instance for mocking. </returns>
        public static DeploymentManifest DeploymentManifest(string id = null, string displayName = null, object data = null, string etag = null, IEnumerable<string> organizations = null)
        {
            organizations ??= new List<string>();

            return new DeploymentManifest(id, displayName, data, etag, organizations?.ToList());
        }

        /// <summary> Initializes a new instance of DeviceGroup. </summary>
        /// <param name="id"> Unique ID of the device group. </param>
        /// <param name="displayName"> Display name of the device group. </param>
        /// <param name="filter"> Query defining which devices should be in this group, [Query Language Reference](https://aka.ms/iotcquery). </param>
        /// <param name="description"> Short summary of device group. </param>
        /// <param name="etag"> ETag used to prevent conflict in device group updates. </param>
        /// <param name="organizations"> List of organization IDs of the device group, only one organization is supported today, multiple organizations will be supported soon. </param>
        /// <returns> A new <see cref="Models.DeviceGroup"/> instance for mocking. </returns>
        public static DeviceGroup DeviceGroup(string id = null, string displayName = null, string filter = null, string description = null, string etag = null, IEnumerable<string> organizations = null)
        {
            organizations ??= new List<string>();

            return new DeviceGroup(id, displayName, filter, description, etag, organizations?.ToList());
        }

        /// <summary> Initializes a new instance of Device. </summary>
        /// <param name="id"> Unique ID of the device. </param>
        /// <param name="etag"> ETag used to prevent conflict in device updates. </param>
        /// <param name="displayName"> Display name of the device. </param>
        /// <param name="template"> The device template definition for the device. </param>
        /// <param name="enabled"> Whether the device connection to IoT Central has been enabled. </param>
        /// <param name="provisioned"> Whether resources have been allocated for the device. </param>
        /// <param name="simulated"> Whether the device is simulated. </param>
        /// <param name="organizations"> List of organization IDs that the device is a part of, only one organization is supported today, multiple organizations will be supported soon. </param>
        /// <param name="type"> The type of the device. </param>
        /// <param name="deploymentManifest"> The deployment manifest assigned to the device. </param>
        /// <returns> A new <see cref="Models.Device"/> instance for mocking. </returns>
        public static Device Device(string id = null, string etag = null, string displayName = null, string template = null, bool? enabled = null, bool? provisioned = null, bool? simulated = null, IEnumerable<string> organizations = null, IEnumerable<DeviceType> type = null, DeploymentManifest deploymentManifest = null)
        {
            organizations ??= new List<string>();
            type ??= new List<DeviceType>();

            return new Device(id, etag, displayName, template, enabled, provisioned, simulated, organizations?.ToList(), type?.ToList(), deploymentManifest);
        }

        /// <summary> Initializes a new instance of DeviceTemplate. </summary>
        /// <param name="id"> Unique ID of the device template. </param>
        /// <param name="type"> The JSON-LD types of this device template. </param>
        /// <param name="etag"> ETag used to prevent conflict in device template updates. </param>
        /// <param name="displayName"> Display name of the device template. </param>
        /// <param name="description"> Detailed description of the device template. </param>
        /// <param name="capabilityModel"> The capability model utilized by this device template. </param>
        /// <returns> A new <see cref="Models.DeviceTemplate"/> instance for mocking. </returns>
        public static DeviceTemplate DeviceTemplate(string id = null, IEnumerable<string> type = null, string etag = null, string displayName = null, string description = null, object capabilityModel = null)
        {
            type ??= new List<string>();

            return new DeviceTemplate(id, type?.ToList(), etag, displayName, description, capabilityModel);
        }

        /// <summary> Initializes a new instance of DeviceCommand. </summary>
        /// <param name="id"> The request ID of the device command execution. </param>
        /// <param name="connectionTimeout"> Connection timeout in seconds to wait for a disconnected device to come online. Defaults to 0 seconds. </param>
        /// <param name="responseTimeout"> Response timeout in seconds to wait for a command completion on a device. Defaults to 30 seconds. </param>
        /// <param name="request"> The payload for the device command, support any primitive types or object. </param>
        /// <param name="response"> The payload of the device command response, support any primitive types or object. </param>
        /// <param name="responseCode"> The status code of the device command response. </param>
        /// <returns> A new <see cref="Models.DeviceCommand"/> instance for mocking. </returns>
        public static DeviceCommand DeviceCommand(string id = null, int? connectionTimeout = null, int? responseTimeout = null, object request = null, object response = null, int? responseCode = null)
        {
            return new DeviceCommand(id, connectionTimeout, responseTimeout, request, response, responseCode);
        }

        /// <summary> Initializes a new instance of Collection. </summary>
        /// <param name="value"> The collection of entities. </param>
        /// <param name="nextLink"> URL to get the next page of entities. </param>
        /// <returns> A new <see cref="Models.Collection"/> instance for mocking. </returns>
        public static Collection Collection(IEnumerable<object> value = null, string nextLink = null)
        {
            value ??= new List<object>();

            return new Collection(value?.ToList(), nextLink);
        }

        /// <summary> Initializes a new instance of DeviceTelemetry. </summary>
        /// <param name="value"> The last known value of this device telemetry. </param>
        /// <param name="timestamp"> String-formatted date representing the time when the telemetry value was sent. </param>
        /// <returns> A new <see cref="Models.DeviceTelemetry"/> instance for mocking. </returns>
        public static DeviceTelemetry DeviceTelemetry(object value = null, DateTimeOffset? timestamp = null)
        {
            return new DeviceTelemetry(value, timestamp);
        }

        /// <summary> Initializes a new instance of DeviceCredentials. </summary>
        /// <param name="idScope"> ID scope for connecting to the IoT Central application. </param>
        /// <param name="symmetricKey"> The symmetric key credentials for the device. </param>
        /// <param name="x509"> The X.509 credential information for the device. </param>
        /// <param name="tpm"> The TPM credentials for the device. </param>
        /// <returns> A new <see cref="Models.DeviceCredentials"/> instance for mocking. </returns>
        public static DeviceCredentials DeviceCredentials(string idScope = null, SymmetricKey symmetricKey = null, X509 x509 = null, Tpm tpm = null)
        {
            return new DeviceCredentials(idScope, symmetricKey, x509, tpm);
        }

        /// <summary> Initializes a new instance of X509Certificate. </summary>
        /// <param name="certificate"> The string representation of this certificate. </param>
        /// <param name="info"> Information about this certificate. </param>
        /// <returns> A new <see cref="Models.X509Certificate"/> instance for mocking. </returns>
        public static X509Certificate X509Certificate(string certificate = null, X509CertificateInfo info = null)
        {
            return new X509Certificate(certificate, info);
        }

        /// <summary> Initializes a new instance of X509CertificateInfo. </summary>
        /// <param name="sha1Thumbprint"> The SHA-1 hash value of the certificate. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sha1Thumbprint"/> is null. </exception>
        /// <returns> A new <see cref="Models.X509CertificateInfo"/> instance for mocking. </returns>
        public static X509CertificateInfo X509CertificateInfo(string sha1Thumbprint = null)
        {
            if (sha1Thumbprint == null)
            {
                throw new ArgumentNullException(nameof(sha1Thumbprint));
            }

            return new X509CertificateInfo(sha1Thumbprint);
        }

        /// <summary> Initializes a new instance of DeviceRelationship. </summary>
        /// <param name="id"> The unique identifier of this relationship. </param>
        /// <param name="source"> The device ID of the source (parent) device. </param>
        /// <param name="target"> The device ID of the target (child) device. </param>
        /// <returns> A new <see cref="Models.DeviceRelationship"/> instance for mocking. </returns>
        public static DeviceRelationship DeviceRelationship(string id = null, string source = null, string target = null)
        {
            return new DeviceRelationship(id, source, target);
        }

        /// <summary> Initializes a new instance of EnrollmentGroup. </summary>
        /// <param name="id"> Unique ID of the enrollment group. </param>
        /// <param name="displayName"> Display name of the enrollment group. </param>
        /// <param name="enabled"> Whether the devices using the group are allowed to connect to IoT Central. </param>
        /// <param name="type"> Type of devices that connect through the group. </param>
        /// <param name="attestation"> The attestation mechanism for the enrollment group. </param>
        /// <param name="etag"> ETag used to prevent conflict in enrollment group updates. </param>
        /// <param name="idScope"> ID scope for connecting to the IoT Central application. </param>
        /// <returns> A new <see cref="Models.EnrollmentGroup"/> instance for mocking. </returns>
        public static EnrollmentGroup EnrollmentGroup(string id = null, string displayName = null, bool? enabled = null, EnrollmentGroupType type = default, GroupAttestation attestation = null, string etag = null, string idScope = null)
        {
            return new EnrollmentGroup(id, displayName, enabled, type, attestation, etag, idScope);
        }

        /// <summary> Initializes a new instance of SigningX509Certificate. </summary>
        /// <param name="verified"> Whether the certificate has been verified. </param>
        /// <param name="certificate"> The string representation of this certificate. </param>
        /// <param name="info"> Information about this certificate. </param>
        /// <param name="etag"> ETag used to prevent conflict across multiple updates. </param>
        /// <returns> A new <see cref="Models.SigningX509Certificate"/> instance for mocking. </returns>
        public static SigningX509Certificate SigningX509Certificate(bool? verified = null, string certificate = null, X509CertificateInfo info = null, string etag = null)
        {
            return new SigningX509Certificate(verified, certificate, info, etag);
        }

        /// <summary> Initializes a new instance of X509VerificationCode. </summary>
        /// <param name="verificationCode"> The X509 certificate verification code. </param>
        /// <returns> A new <see cref="Models.X509VerificationCode"/> instance for mocking. </returns>
        public static X509VerificationCode X509VerificationCode(string verificationCode = null)
        {
            return new X509VerificationCode(verificationCode);
        }

        /// <summary> Initializes a new instance of FileUpload. </summary>
        /// <param name="account"> The storage account name where to upload the file to. </param>
        /// <param name="connectionString"> The connection string used to configure the storage account. </param>
        /// <param name="container"> The name of the container inside the storage account. </param>
        /// <param name="sasTtl"> ISO 8601 duration standard, The amount of time the device’s request to upload a file is valid before it expires. </param>
        /// <param name="state"> The state of the file upload configuration. </param>
        /// <param name="etag"> ETag used to prevent conflict with multiple uploads. </param>
        /// <param name="readAccess"> The flag indicate if user be able to access device uploaded files from IoT Central portal. </param>
        /// <returns> A new <see cref="Models.FileUpload"/> instance for mocking. </returns>
        public static FileUpload FileUpload(string account = null, string connectionString = null, string container = null, string sasTtl = null, FileUploadState? state = null, string etag = null, bool? readAccess = null)
        {
            return new FileUpload(account, connectionString, container, sasTtl, state, etag, readAccess);
        }

        /// <summary> Initializes a new instance of Job. </summary>
        /// <param name="id"> Unique ID of the job. </param>
        /// <param name="scheduledJobId"> Id of the scheduled job definition that created this job. </param>
        /// <param name="displayName"> Display name of the job. </param>
        /// <param name="description"> Detailed description of the job. </param>
        /// <param name="group"> The ID of the device group on which to execute the job. </param>
        /// <param name="batch"> The batching configuration for the job. </param>
        /// <param name="cancellationThreshold"> The cancellation threshold for the job. </param>
        /// <param name="data"> The capabilities being updated by the job and the values with which they are being updated. </param>
        /// <param name="start"> The start time of the job. </param>
        /// <param name="end"> The end time of the job. </param>
        /// <param name="progress"> The progress statistics of the job. </param>
        /// <param name="status"> Indicates whether the job is starting, running, etc. </param>
        /// <param name="organizations"> List of organizations of the job, only one organization is supported today, multiple organizations will be supported soon. </param>
        /// <returns> A new <see cref="Models.Job"/> instance for mocking. </returns>
        public static Job Job(string id = null, string scheduledJobId = null, string displayName = null, string description = null, string group = null, JobBatch batch = null, JobCancellationThreshold cancellationThreshold = null, IEnumerable<JobData> data = null, DateTimeOffset? start = null, DateTimeOffset? end = null, JobProgress progress = null, string status = null, IEnumerable<string> organizations = null)
        {
            data ??= new List<JobData>();
            organizations ??= new List<string>();

            return new Job(id, scheduledJobId, displayName, description, group, batch, cancellationThreshold, data?.ToList(), start, end, progress, status, organizations?.ToList());
        }

        /// <summary> Initializes a new instance of JobProgress. </summary>
        /// <param name="total"> The total number of entities targeted by the job. </param>
        /// <param name="pending"> The number of entities for which the job is not yet running. </param>
        /// <param name="completed"> The number of entities for which the job has completed. </param>
        /// <param name="failed"> The number of entities for which the job has failed. </param>
        /// <returns> A new <see cref="Models.JobProgress"/> instance for mocking. </returns>
        public static JobProgress JobProgress(int? total = null, int? pending = null, int? completed = null, int? failed = null)
        {
            return new JobProgress(total, pending, completed, failed);
        }

        /// <summary> Initializes a new instance of JobDeviceStatus. </summary>
        /// <param name="id"> ID of the device whose job status is being provided. </param>
        /// <param name="status"> Indicates whether the job is starting, running, etc. for the given device. </param>
        /// <returns> A new <see cref="Models.JobDeviceStatus"/> instance for mocking. </returns>
        public static JobDeviceStatus JobDeviceStatus(string id = null, string status = null)
        {
            return new JobDeviceStatus(id, status);
        }

        /// <summary> Initializes a new instance of Organization. </summary>
        /// <param name="id"> Unique ID of the organization. </param>
        /// <param name="displayName"> Display name of the organization. </param>
        /// <param name="parent"> ID of the parent of the organization. </param>
        /// <returns> A new <see cref="Models.Organization"/> instance for mocking. </returns>
        public static Organization Organization(string id = null, string displayName = null, string parent = null)
        {
            return new Organization(id, displayName, parent);
        }

        /// <summary> Initializes a new instance of QueryResponse. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.QueryResponse"/> instance for mocking. </returns>
        public static QueryResponse QueryResponse(IEnumerable<object> results = null)
        {
            results ??= new List<object>();

            return new QueryResponse(results?.ToList());
        }

        /// <summary> Initializes a new instance of Role. </summary>
        /// <param name="id"> Unique ID of the role. </param>
        /// <param name="displayName"> Display name of the role. </param>
        /// <returns> A new <see cref="Models.Role"/> instance for mocking. </returns>
        public static Role Role(string id = null, string displayName = null)
        {
            return new Role(id, displayName);
        }

        /// <summary> Initializes a new instance of ScheduledJob. </summary>
        /// <param name="etag"> ETag used to prevent conflict in scheduled job updates. </param>
        /// <param name="id"> Unique ID of the scheduled job. </param>
        /// <param name="displayName"> Display name of the scheduled job. </param>
        /// <param name="description"> Detailed description of the scheduled job. </param>
        /// <param name="group"> The ID of the device group on which to execute the scheduled job. </param>
        /// <param name="batch"> The batching configuration for the scheduled job. </param>
        /// <param name="cancellationThreshold"> The cancellation threshold for the scheduled job. </param>
        /// <param name="data"> Data related to the operation being performed by this job. All entries must be of the same type. </param>
        /// <param name="organizations"> List of organizations of the job, only one organization is supported today, multiple organizations will be supported soon. </param>
        /// <param name="schedule"> The schedule at which to execute the job. </param>
        /// <param name="enabled"> Whether the scheduled job is enabled. </param>
        /// <param name="completed"> Whether the scheduled job has completed. </param>
        /// <returns> A new <see cref="Models.ScheduledJob"/> instance for mocking. </returns>
        public static ScheduledJob ScheduledJob(string etag = null, string id = null, string displayName = null, string description = null, string group = null, JobBatch batch = null, JobCancellationThreshold cancellationThreshold = null, IEnumerable<JobData> data = null, IEnumerable<string> organizations = null, JobSchedule schedule = null, bool? enabled = null, bool? completed = null)
        {
            data ??= new List<JobData>();
            organizations ??= new List<string>();

            return new ScheduledJob(etag, id, displayName, description, group, batch, cancellationThreshold, data?.ToList(), organizations?.ToList(), schedule, enabled, completed);
        }

        /// <summary> Initializes a new instance of User. </summary>
        /// <param name="roles"> List of role assignments that specify the permissions to access the application. </param>
        /// <param name="id"> Unique ID of the user. </param>
        /// <param name="type"> Type of the user. </param>
        /// <returns> A new <see cref="Models.User"/> instance for mocking. </returns>
        public static User User(IEnumerable<RoleAssignment> roles = null, string id = null, string type = null)
        {
            roles ??= new List<RoleAssignment>();

            return new User(roles?.ToList(), id, type);
        }
    }
}
