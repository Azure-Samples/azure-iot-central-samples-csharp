// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.Azure.IoTCentral.Preview.Models;

namespace Microsoft.Azure.IoTCentral.Preview
{
    internal partial class EnrollmentGroupsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _subdomain;
        private readonly string _baseDomain;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of EnrollmentGroupsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subdomain"> The application subdomain. </param>
        /// <param name="baseDomain"> The base domain for all Azure IoT Central service requests. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="subdomain"/>, <paramref name="baseDomain"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subdomain"/> is an empty string, and was expected to be non-empty. </exception>
        public EnrollmentGroupsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subdomain, string baseDomain = "azureiotcentral.com", string apiVersion = "2022-10-31-preview")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _subdomain = subdomain ?? throw new ArgumentNullException(nameof(subdomain));
            _baseDomain = baseDomain ?? throw new ArgumentNullException(nameof(baseDomain));
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateListRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/enrollmentGroups", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the list of enrollment groups in an application. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<EnrollmentGroupCollection>> ListAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrollmentGroupCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EnrollmentGroupCollection.DeserializeEnrollmentGroupCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the list of enrollment groups in an application. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<EnrollmentGroupCollection> List(CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrollmentGroupCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EnrollmentGroupCollection.DeserializeEnrollmentGroupCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string enrollmentGroupId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/enrollmentGroups/", false);
            uri.AppendPath(enrollmentGroupId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get an enrollment group by ID. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> is null. </exception>
        /// <remarks> Get details about an enrollment group by ID. </remarks>
        public async Task<Response<EnrollmentGroup>> GetAsync(string enrollmentGroupId, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }

            using var message = CreateGetRequest(enrollmentGroupId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrollmentGroup value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EnrollmentGroup.DeserializeEnrollmentGroup(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get an enrollment group by ID. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> is null. </exception>
        /// <remarks> Get details about an enrollment group by ID. </remarks>
        public Response<EnrollmentGroup> Get(string enrollmentGroupId, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }

            using var message = CreateGetRequest(enrollmentGroupId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrollmentGroup value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EnrollmentGroup.DeserializeEnrollmentGroup(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateRequest(string enrollmentGroupId, EnrollmentGroup body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/enrollmentGroups/", false);
            uri.AppendPath(enrollmentGroupId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="body"> Enrollment group body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Create an enrollment group. </remarks>
        public async Task<Response<EnrollmentGroup>> CreateAsync(string enrollmentGroupId, EnrollmentGroup body, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateRequest(enrollmentGroupId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrollmentGroup value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EnrollmentGroup.DeserializeEnrollmentGroup(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="body"> Enrollment group body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Create an enrollment group. </remarks>
        public Response<EnrollmentGroup> Create(string enrollmentGroupId, EnrollmentGroup body, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateRequest(enrollmentGroupId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrollmentGroup value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EnrollmentGroup.DeserializeEnrollmentGroup(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRequest(string enrollmentGroupId, object body, string ifMatch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/enrollmentGroups/", false);
            uri.AppendPath(enrollmentGroupId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (ifMatch != null)
            {
                request.Headers.Add("If-Match", ifMatch);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="body"> Enrollment group patch body. </param>
        /// <param name="ifMatch"> Only perform the operation if the entity&apos;s etag matches one of the etags provided or * is provided. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update an enrollment group. </remarks>
        public async Task<Response<EnrollmentGroup>> UpdateAsync(string enrollmentGroupId, object body, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateRequest(enrollmentGroupId, body, ifMatch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrollmentGroup value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EnrollmentGroup.DeserializeEnrollmentGroup(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="body"> Enrollment group patch body. </param>
        /// <param name="ifMatch"> Only perform the operation if the entity&apos;s etag matches one of the etags provided or * is provided. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update an enrollment group. </remarks>
        public Response<EnrollmentGroup> Update(string enrollmentGroupId, object body, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateRequest(enrollmentGroupId, body, ifMatch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrollmentGroup value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EnrollmentGroup.DeserializeEnrollmentGroup(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveRequest(string enrollmentGroupId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/enrollmentGroups/", false);
            uri.AppendPath(enrollmentGroupId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> is null. </exception>
        /// <remarks> Delete an enrollment group by ID. </remarks>
        public async Task<Response> RemoveAsync(string enrollmentGroupId, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }

            using var message = CreateRemoveRequest(enrollmentGroupId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> is null. </exception>
        /// <remarks> Delete an enrollment group by ID. </remarks>
        public Response Remove(string enrollmentGroupId, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }

            using var message = CreateRemoveRequest(enrollmentGroupId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetX509Request(string enrollmentGroupId, CertificateEntry entry)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/enrollmentGroups/", false);
            uri.AppendPath(enrollmentGroupId, true);
            uri.AppendPath("/certificates/", false);
            uri.AppendPath(entry.ToSerialString(), true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the primary or secondary x509 certificate of an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="entry"> Entry of certificate only support primary and secondary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> is null. </exception>
        /// <remarks> Get details about the primary or secondary x509 certificate of an enrollment group, if it exists. </remarks>
        public async Task<Response<SigningX509Certificate>> GetX509Async(string enrollmentGroupId, CertificateEntry entry, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }

            using var message = CreateGetX509Request(enrollmentGroupId, entry);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SigningX509Certificate value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SigningX509Certificate.DeserializeSigningX509Certificate(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the primary or secondary x509 certificate of an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="entry"> Entry of certificate only support primary and secondary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> is null. </exception>
        /// <remarks> Get details about the primary or secondary x509 certificate of an enrollment group, if it exists. </remarks>
        public Response<SigningX509Certificate> GetX509(string enrollmentGroupId, CertificateEntry entry, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }

            using var message = CreateGetX509Request(enrollmentGroupId, entry);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SigningX509Certificate value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SigningX509Certificate.DeserializeSigningX509Certificate(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateX509Request(string enrollmentGroupId, CertificateEntry entry, SigningX509Certificate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/enrollmentGroups/", false);
            uri.AppendPath(enrollmentGroupId, true);
            uri.AppendPath("/certificates/", false);
            uri.AppendPath(entry.ToSerialString(), true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Sets the primary or secondary x509 certificate of an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="entry"> Entry of certificate only support primary and secondary. </param>
        /// <param name="body"> Certificate definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Sets the primary or secondary x509 certificate of an enrollment group. </remarks>
        public async Task<Response<SigningX509Certificate>> CreateX509Async(string enrollmentGroupId, CertificateEntry entry, SigningX509Certificate body, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateX509Request(enrollmentGroupId, entry, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SigningX509Certificate value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SigningX509Certificate.DeserializeSigningX509Certificate(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Sets the primary or secondary x509 certificate of an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="entry"> Entry of certificate only support primary and secondary. </param>
        /// <param name="body"> Certificate definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Sets the primary or secondary x509 certificate of an enrollment group. </remarks>
        public Response<SigningX509Certificate> CreateX509(string enrollmentGroupId, CertificateEntry entry, SigningX509Certificate body, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateX509Request(enrollmentGroupId, entry, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SigningX509Certificate value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SigningX509Certificate.DeserializeSigningX509Certificate(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveX509Request(string enrollmentGroupId, CertificateEntry entry)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/enrollmentGroups/", false);
            uri.AppendPath(enrollmentGroupId, true);
            uri.AppendPath("/certificates/", false);
            uri.AppendPath(entry.ToSerialString(), true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Removes the primary or secondary x509 certificate of an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="entry"> Entry of certificate only support primary and secondary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> is null. </exception>
        /// <remarks> Removes the primary or secondary x509 certificate of an enrollment group. </remarks>
        public async Task<Response> RemoveX509Async(string enrollmentGroupId, CertificateEntry entry, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }

            using var message = CreateRemoveX509Request(enrollmentGroupId, entry);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Removes the primary or secondary x509 certificate of an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="entry"> Entry of certificate only support primary and secondary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> is null. </exception>
        /// <remarks> Removes the primary or secondary x509 certificate of an enrollment group. </remarks>
        public Response RemoveX509(string enrollmentGroupId, CertificateEntry entry, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }

            using var message = CreateRemoveX509Request(enrollmentGroupId, entry);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGenerateVerificationCodeX509Request(string enrollmentGroupId, CertificateEntry entry)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/enrollmentGroups/", false);
            uri.AppendPath(enrollmentGroupId, true);
            uri.AppendPath("/certificates/", false);
            uri.AppendPath(entry.ToSerialString(), true);
            uri.AppendPath("/generateVerificationCode", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Generate a verification code for the primary or secondary x509 certificate of an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="entry"> Entry of certificate only support primary and secondary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> is null. </exception>
        /// <remarks> Generate a verification code for the primary or secondary x509 certificate of an enrollment group. </remarks>
        public async Task<Response<X509VerificationCode>> GenerateVerificationCodeX509Async(string enrollmentGroupId, CertificateEntry entry, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }

            using var message = CreateGenerateVerificationCodeX509Request(enrollmentGroupId, entry);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        X509VerificationCode value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = X509VerificationCode.DeserializeX509VerificationCode(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Generate a verification code for the primary or secondary x509 certificate of an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="entry"> Entry of certificate only support primary and secondary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> is null. </exception>
        /// <remarks> Generate a verification code for the primary or secondary x509 certificate of an enrollment group. </remarks>
        public Response<X509VerificationCode> GenerateVerificationCodeX509(string enrollmentGroupId, CertificateEntry entry, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }

            using var message = CreateGenerateVerificationCodeX509Request(enrollmentGroupId, entry);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        X509VerificationCode value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = X509VerificationCode.DeserializeX509VerificationCode(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateVerifyX509Request(string enrollmentGroupId, CertificateEntry entry, X509VerificationCertificate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/enrollmentGroups/", false);
            uri.AppendPath(enrollmentGroupId, true);
            uri.AppendPath("/certificates/", false);
            uri.AppendPath(entry.ToSerialString(), true);
            uri.AppendPath("/verify", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Verify the primary or secondary x509 certificate of an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="entry"> Entry of certificate only support primary and secondary. </param>
        /// <param name="body"> Certificate for the signed verification code. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Verify the primary or secondary x509 certificate of an enrollment group by providing a certificate with the signed verification code. </remarks>
        public async Task<Response> VerifyX509Async(string enrollmentGroupId, CertificateEntry entry, X509VerificationCertificate body, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateVerifyX509Request(enrollmentGroupId, entry, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Verify the primary or secondary x509 certificate of an enrollment group. </summary>
        /// <param name="enrollmentGroupId"> Unique ID of the enrollment group. </param>
        /// <param name="entry"> Entry of certificate only support primary and secondary. </param>
        /// <param name="body"> Certificate for the signed verification code. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enrollmentGroupId"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Verify the primary or secondary x509 certificate of an enrollment group by providing a certificate with the signed verification code. </remarks>
        public Response VerifyX509(string enrollmentGroupId, CertificateEntry entry, X509VerificationCertificate body, CancellationToken cancellationToken = default)
        {
            if (enrollmentGroupId == null)
            {
                throw new ArgumentNullException(nameof(enrollmentGroupId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateVerifyX509Request(enrollmentGroupId, entry, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_subdomain, true);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_baseDomain, false);
            uri.AppendRaw("/api", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the list of enrollment groups in an application. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<EnrollmentGroupCollection>> ListNextPageAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrollmentGroupCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EnrollmentGroupCollection.DeserializeEnrollmentGroupCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the list of enrollment groups in an application. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<EnrollmentGroupCollection> ListNextPage(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrollmentGroupCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EnrollmentGroupCollection.DeserializeEnrollmentGroupCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
