// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.Azure.IoTCentral.Preview.Models;

namespace Microsoft.Azure.IoTCentral.Preview
{
    /// <summary> The Jobs service client. </summary>
    public partial class JobsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal JobsRestClient RestClient { get; }

        /// <summary> Initializes a new instance of JobsClient for mocking. </summary>
        protected JobsClient()
        {
        }

        /// <summary> Initializes a new instance of JobsClient. </summary>
        /// <param name="subdomain"> The application subdomain. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="baseDomain"> The base domain for all Azure IoT Central service requests. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public JobsClient(string subdomain, TokenCredential credential, string baseDomain = "azureiotcentral.com", AzureIoTCentralClientOptions options = null)
        {
            if (subdomain == null)
            {
                throw new ArgumentNullException(nameof(subdomain));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            if (baseDomain == null)
            {
                throw new ArgumentNullException(nameof(baseDomain));
            }

            options ??= new AzureIoTCentralClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://apps.azureiotcentral.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new JobsRestClient(_clientDiagnostics, _pipeline, subdomain, baseDomain, options.Version);
        }

        /// <summary> Initializes a new instance of JobsClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subdomain"> The application subdomain. </param>
        /// <param name="baseDomain"> The base domain for all Azure IoT Central service requests. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="subdomain"/>, <paramref name="baseDomain"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subdomain"/> is an empty string, and was expected to be non-empty. </exception>
        internal JobsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subdomain, string baseDomain = "azureiotcentral.com", string apiVersion = "2022-10-31-preview")
        {
            RestClient = new JobsRestClient(clientDiagnostics, pipeline, subdomain, baseDomain, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get a job by ID. </summary>
        /// <param name="jobId"> Unique ID of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get details about a running or completed job by job ID. </remarks>
        public virtual async Task<Response<Job>> GetAsync(string jobId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("JobsClient.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(jobId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a job by ID. </summary>
        /// <param name="jobId"> Unique ID of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get details about a running or completed job by job ID. </remarks>
        public virtual Response<Job> Get(string jobId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("JobsClient.Get");
            scope.Start();
            try
            {
                return RestClient.Get(jobId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Execute a new job. </summary>
        /// <param name="jobId"> Unique ID of the job. </param>
        /// <param name="body"> Job definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and execute a new job via its job definition. </remarks>
        public virtual async Task<Response<Job>> CreateAsync(string jobId, Job body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("JobsClient.Create");
            scope.Start();
            try
            {
                return await RestClient.CreateAsync(jobId, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Execute a new job. </summary>
        /// <param name="jobId"> Unique ID of the job. </param>
        /// <param name="body"> Job definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and execute a new job via its job definition. </remarks>
        public virtual Response<Job> Create(string jobId, Job body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("JobsClient.Create");
            scope.Start();
            try
            {
                return RestClient.Create(jobId, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rerun a job on failed devices. </summary>
        /// <param name="jobId"> Unique ID of the job. </param>
        /// <param name="rerunId"> Unique ID of the job rerun. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Execute a rerun of an existing job on all failed devices. </remarks>
        public virtual async Task<Response<Job>> RerunAsync(string jobId, string rerunId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("JobsClient.Rerun");
            scope.Start();
            try
            {
                return await RestClient.RerunAsync(jobId, rerunId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rerun a job on failed devices. </summary>
        /// <param name="jobId"> Unique ID of the job. </param>
        /// <param name="rerunId"> Unique ID of the job rerun. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Execute a rerun of an existing job on all failed devices. </remarks>
        public virtual Response<Job> Rerun(string jobId, string rerunId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("JobsClient.Rerun");
            scope.Start();
            try
            {
                return RestClient.Rerun(jobId, rerunId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resume a stopped job. </summary>
        /// <param name="jobId"> Unique ID of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Resume execution of an existing stopped job. </remarks>
        public virtual async Task<Response> ResumeAsync(string jobId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("JobsClient.Resume");
            scope.Start();
            try
            {
                return await RestClient.ResumeAsync(jobId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resume a stopped job. </summary>
        /// <param name="jobId"> Unique ID of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Resume execution of an existing stopped job. </remarks>
        public virtual Response Resume(string jobId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("JobsClient.Resume");
            scope.Start();
            try
            {
                return RestClient.Resume(jobId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stop a running job. </summary>
        /// <param name="jobId"> Unique ID of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Stop execution of a job that is currently running. </remarks>
        public virtual async Task<Response> StopAsync(string jobId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("JobsClient.Stop");
            scope.Start();
            try
            {
                return await RestClient.StopAsync(jobId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stop a running job. </summary>
        /// <param name="jobId"> Unique ID of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Stop execution of a job that is currently running. </remarks>
        public virtual Response Stop(string jobId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("JobsClient.Stop");
            scope.Start();
            try
            {
                return RestClient.Stop(jobId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the list of jobs in an application. </summary>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Job> ListAsync(int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Job>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("JobsClient.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAsync(maxpagesize, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Job>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("JobsClient.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextPageAsync(nextLink, maxpagesize, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the list of jobs in an application. </summary>
        /// <param name="maxpagesize"> The maximum number of resources to return from one response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Job> List(int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Page<Job> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("JobsClient.List");
                scope.Start();
                try
                {
                    var response = RestClient.List(maxpagesize, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Job> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("JobsClient.List");
                scope.Start();
                try
                {
                    var response = RestClient.ListNextPage(nextLink, maxpagesize, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get device statuses. </summary>
        /// <param name="jobId"> Unique ID of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <remarks> Get the list of individual device statuses by job ID. </remarks>
        public virtual AsyncPageable<JobDeviceStatus> GetDevicesAsync(string jobId, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            async Task<Page<JobDeviceStatus>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("JobsClient.GetDevices");
                scope.Start();
                try
                {
                    var response = await RestClient.GetDevicesAsync(jobId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<JobDeviceStatus>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("JobsClient.GetDevices");
                scope.Start();
                try
                {
                    var response = await RestClient.GetDevicesNextPageAsync(nextLink, jobId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get device statuses. </summary>
        /// <param name="jobId"> Unique ID of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <remarks> Get the list of individual device statuses by job ID. </remarks>
        public virtual Pageable<JobDeviceStatus> GetDevices(string jobId, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            Page<JobDeviceStatus> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("JobsClient.GetDevices");
                scope.Start();
                try
                {
                    var response = RestClient.GetDevices(jobId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<JobDeviceStatus> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("JobsClient.GetDevices");
                scope.Start();
                try
                {
                    var response = RestClient.GetDevicesNextPage(nextLink, jobId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
