// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IoTCentral
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// EnrollmentGroups operations.
    /// </summary>
    public partial interface IEnrollmentGroups
    {
        /// <summary>
        /// Get the list of enrollment groups in an application
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EnrollmentGroupCollection,EnrollmentGroupsListHeaders>> ListWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get an enrollment group by ID
        /// </summary>
        /// <remarks>
        /// Get details about an enrollment group by ID.
        /// </remarks>
        /// <param name='enrollmentGroupId'>
        /// Unique ID of the enrollment group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EnrollmentGroup,EnrollmentGroupsGetHeaders>> GetWithHttpMessagesAsync(string enrollmentGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create an enrollment group
        /// </summary>
        /// <remarks>
        /// Create an enrollment group.
        /// </remarks>
        /// <param name='enrollmentGroupId'>
        /// Unique ID of the enrollment group.
        /// </param>
        /// <param name='body'>
        /// Enrollment group body.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EnrollmentGroup,EnrollmentGroupsCreateHeaders>> CreateWithHttpMessagesAsync(string enrollmentGroupId, EnrollmentGroup body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an enrollment group
        /// </summary>
        /// <remarks>
        /// Update an enrollment group.
        /// </remarks>
        /// <param name='enrollmentGroupId'>
        /// Unique ID of the enrollment group.
        /// </param>
        /// <param name='body'>
        /// Enrollment group patch body.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EnrollmentGroup,EnrollmentGroupsUpdateHeaders>> UpdateWithHttpMessagesAsync(string enrollmentGroupId, object body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an enrollment group
        /// </summary>
        /// <remarks>
        /// Delete an enrollment group by ID.
        /// </remarks>
        /// <param name='enrollmentGroupId'>
        /// Unique ID of the enrollment group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationHeaderResponse<EnrollmentGroupsRemoveHeaders>> RemoveWithHttpMessagesAsync(string enrollmentGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the primary or secondary x509 certificate of an enrollment
        /// group
        /// </summary>
        /// <remarks>
        /// Get details about the primary or secondary x509 certificate of an
        /// enrollment group, if it exists.
        /// </remarks>
        /// <param name='enrollmentGroupId'>
        /// Unique ID of the enrollment group.
        /// </param>
        /// <param name='entry'>
        /// Entry of certificate only support primary and secondary. Possible
        /// values include: 'Primary', 'Secondary'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SigningX509Certificate,EnrollmentGroupsGetX509Headers>> GetX509WithHttpMessagesAsync(string enrollmentGroupId, CertificateEntry entry, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the primary or secondary x509 certificate of an enrollment
        /// group
        /// </summary>
        /// <remarks>
        /// Sets the primary or secondary x509 certificate of an enrollment
        /// group.
        /// </remarks>
        /// <param name='enrollmentGroupId'>
        /// Unique ID of the enrollment group.
        /// </param>
        /// <param name='entry'>
        /// Entry of certificate only support primary and secondary. Possible
        /// values include: 'Primary', 'Secondary'
        /// </param>
        /// <param name='body'>
        /// Certificate definition.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SigningX509Certificate,EnrollmentGroupsCreateX509Headers>> CreateX509WithHttpMessagesAsync(string enrollmentGroupId, CertificateEntry entry, SigningX509Certificate body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Removes the primary or secondary x509 certificate of an enrollment
        /// group
        /// </summary>
        /// <remarks>
        /// Removes the primary or secondary x509 certificate of an enrollment
        /// group.
        /// </remarks>
        /// <param name='enrollmentGroupId'>
        /// Unique ID of the enrollment group.
        /// </param>
        /// <param name='entry'>
        /// Entry of certificate only support primary and secondary. Possible
        /// values include: 'Primary', 'Secondary'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationHeaderResponse<EnrollmentGroupsRemoveX509Headers>> RemoveX509WithHttpMessagesAsync(string enrollmentGroupId, CertificateEntry entry, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate a verification code for the primary or secondary x509
        /// certificate of an enrollment group
        /// </summary>
        /// <remarks>
        /// Generate a verification code for the primary or secondary x509
        /// certificate of an enrollment group.
        /// </remarks>
        /// <param name='enrollmentGroupId'>
        /// Unique ID of the enrollment group.
        /// </param>
        /// <param name='entry'>
        /// Entry of certificate only support primary and secondary. Possible
        /// values include: 'Primary', 'Secondary'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<X509VerificationCode,EnrollmentGroupsGenerateVerificationCodeX509Headers>> GenerateVerificationCodeX509WithHttpMessagesAsync(string enrollmentGroupId, CertificateEntry entry, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Verify the primary or secondary x509 certificate of an enrollment
        /// group
        /// </summary>
        /// <remarks>
        /// Verify the primary or secondary x509 certificate of an enrollment
        /// group by providing a certificate with the signed verification code.
        /// </remarks>
        /// <param name='enrollmentGroupId'>
        /// Unique ID of the enrollment group.
        /// </param>
        /// <param name='entry'>
        /// Entry of certificate only support primary and secondary. Possible
        /// values include: 'Primary', 'Secondary'
        /// </param>
        /// <param name='certificate'>
        /// The string representation of this certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationHeaderResponse<EnrollmentGroupsVerifyX509Headers>> VerifyX509WithHttpMessagesAsync(string enrollmentGroupId, CertificateEntry entry, string certificate, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
