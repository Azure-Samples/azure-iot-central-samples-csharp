// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IoTCentral
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DeviceTemplates.
    /// </summary>
    public static partial class DeviceTemplatesExtensions
    {
            /// <summary>
            /// Get the list of device templates in an application with basic ODATA support
            /// ($top, $filter, $orderby), [more
            /// details](https://aka.ms/iotcentralodatasupport).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static DeviceTemplateCollection List(this IDeviceTemplates operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of device templates in an application with basic ODATA support
            /// ($top, $filter, $orderby), [more
            /// details](https://aka.ms/iotcentralodatasupport).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceTemplateCollection> ListAsync(this IDeviceTemplates operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a device template by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceTemplateId'>
            /// Unique [Digital Twin Model
            /// Identifier](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#digital-twin-model-identifier)
            /// of the device template.
            /// </param>
            public static DeviceTemplate Get(this IDeviceTemplates operations, string deviceTemplateId)
            {
                return operations.GetAsync(deviceTemplateId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a device template by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceTemplateId'>
            /// Unique [Digital Twin Model
            /// Identifier](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#digital-twin-model-identifier)
            /// of the device template.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceTemplate> GetAsync(this IDeviceTemplates operations, string deviceTemplateId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(deviceTemplateId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Publish a new device template. Default views will be automatically
            /// generated for new device templates created this way.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceTemplateId'>
            /// Unique [Digital Twin Model
            /// Identifier](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#digital-twin-model-identifier)
            /// of the device template.
            /// </param>
            /// <param name='body'>
            /// Device template body.
            /// </param>
            public static DeviceTemplate Create(this IDeviceTemplates operations, string deviceTemplateId, DeviceTemplate body)
            {
                return operations.CreateAsync(deviceTemplateId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Publish a new device template. Default views will be automatically
            /// generated for new device templates created this way.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceTemplateId'>
            /// Unique [Digital Twin Model
            /// Identifier](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#digital-twin-model-identifier)
            /// of the device template.
            /// </param>
            /// <param name='body'>
            /// Device template body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceTemplate> CreateAsync(this IDeviceTemplates operations, string deviceTemplateId, DeviceTemplate body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(deviceTemplateId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the cloud properties and overrides of an existing device template
            /// via patch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceTemplateId'>
            /// Unique [Digital Twin Model
            /// Identifier](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#digital-twin-model-identifier)
            /// of the device template.
            /// </param>
            /// <param name='body'>
            /// Device template patch body.
            /// </param>
            public static DeviceTemplate Update(this IDeviceTemplates operations, string deviceTemplateId, object body)
            {
                return operations.UpdateAsync(deviceTemplateId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the cloud properties and overrides of an existing device template
            /// via patch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceTemplateId'>
            /// Unique [Digital Twin Model
            /// Identifier](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#digital-twin-model-identifier)
            /// of the device template.
            /// </param>
            /// <param name='body'>
            /// Device template patch body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceTemplate> UpdateAsync(this IDeviceTemplates operations, string deviceTemplateId, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(deviceTemplateId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a device template
            /// </summary>
            /// <remarks>
            /// Delete an existing device template by device ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceTemplateId'>
            /// Unique [Digital Twin Model
            /// Identifier](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#digital-twin-model-identifier)
            /// of the device template.
            /// </param>
            public static DeviceTemplatesRemoveHeaders Remove(this IDeviceTemplates operations, string deviceTemplateId)
            {
                return operations.RemoveAsync(deviceTemplateId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a device template
            /// </summary>
            /// <remarks>
            /// Delete an existing device template by device ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceTemplateId'>
            /// Unique [Digital Twin Model
            /// Identifier](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#digital-twin-model-identifier)
            /// of the device template.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceTemplatesRemoveHeaders> RemoveAsync(this IDeviceTemplates operations, string deviceTemplateId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveWithHttpMessagesAsync(deviceTemplateId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
