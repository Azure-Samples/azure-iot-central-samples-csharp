// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IoTCentral
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// Azure IoT Central is a service that makes it easy to connect, monitor,
    /// and manage your IoT devices at scale.
    /// </summary>
    public partial class AzureIoTCentral : ServiceClient<AzureIoTCentral>, IAzureIoTCentral
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        internal string BaseUri {get; set;}

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// The base domain for all Azure IoT Central service requests.
        /// </summary>
        public string BaseDomain { get; set; }

        /// <summary>
        /// The application subdomain.
        /// </summary>
        public string Subdomain { get; set; }

        /// <summary>
        /// The version of the API being called.
        /// </summary>
        public string ApiVersion { get; set; }

        /// <summary>
        /// Gets the IApiTokens.
        /// </summary>
        public virtual IApiTokens ApiTokens { get; private set; }

        /// <summary>
        /// Gets the IDeviceGroups.
        /// </summary>
        public virtual IDeviceGroups DeviceGroups { get; private set; }

        /// <summary>
        /// Gets the IDeviceTemplates.
        /// </summary>
        public virtual IDeviceTemplates DeviceTemplates { get; private set; }

        /// <summary>
        /// Gets the IDevices.
        /// </summary>
        public virtual IDevices Devices { get; private set; }

        /// <summary>
        /// Gets the IEnrollmentGroups.
        /// </summary>
        public virtual IEnrollmentGroups EnrollmentGroups { get; private set; }

        /// <summary>
        /// Gets the IFileUploads.
        /// </summary>
        public virtual IFileUploads FileUploads { get; private set; }

        /// <summary>
        /// Gets the IJobs.
        /// </summary>
        public virtual IJobs Jobs { get; private set; }

        /// <summary>
        /// Gets the IOrganizations.
        /// </summary>
        public virtual IOrganizations Organizations { get; private set; }

        /// <summary>
        /// Gets the IRoles.
        /// </summary>
        public virtual IRoles Roles { get; private set; }

        /// <summary>
        /// Gets the IScheduledJobs.
        /// </summary>
        public virtual IScheduledJobs ScheduledJobs { get; private set; }

        /// <summary>
        /// Gets the IUsers.
        /// </summary>
        public virtual IUsers Users { get; private set; }

        /// <summary>
        /// Initializes a new instance of the AzureIoTCentral class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling AzureIoTCentral.Dispose(). False: will not dispose provided httpClient</param>
        public AzureIoTCentral(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AzureIoTCentral class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public AzureIoTCentral(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AzureIoTCentral class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public AzureIoTCentral(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            ApiTokens = new ApiTokens(this);
            DeviceGroups = new DeviceGroups(this);
            DeviceTemplates = new DeviceTemplates(this);
            Devices = new Devices(this);
            EnrollmentGroups = new EnrollmentGroups(this);
            FileUploads = new FileUploads(this);
            Jobs = new Jobs(this);
            Organizations = new Organizations(this);
            Roles = new Roles(this);
            ScheduledJobs = new ScheduledJobs(this);
            Users = new Users(this);
            BaseUri = "https://{subdomain}.{baseDomain}/api";
            BaseDomain = "azureiotcentral.com";
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<Attestation>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<Attestation>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<GroupAttestation>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<GroupAttestation>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<JobData>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<JobData>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<JobScheduleEnd>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<JobScheduleEnd>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<User>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<User>("type"));
            CustomInitialize();
        }
    }
}
