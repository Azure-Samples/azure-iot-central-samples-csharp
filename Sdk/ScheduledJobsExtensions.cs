// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IoTCentral
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ScheduledJobs.
    /// </summary>
    public static partial class ScheduledJobsExtensions
    {
            /// <summary>
            /// Get the list of scheduled job definitions in an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ScheduledJobCollection List(this IScheduledJobs operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of scheduled job definitions in an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduledJobCollection> ListAsync(this IScheduledJobs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a scheduled job by ID
            /// </summary>
            /// <remarks>
            /// Get details about a scheduled job by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduledJobId'>
            /// Unique ID of the scheduled job.
            /// </param>
            public static ScheduledJob Get(this IScheduledJobs operations, string scheduledJobId)
            {
                return operations.GetAsync(scheduledJobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a scheduled job by ID
            /// </summary>
            /// <remarks>
            /// Get details about a scheduled job by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduledJobId'>
            /// Unique ID of the scheduled job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduledJob> GetAsync(this IScheduledJobs operations, string scheduledJobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scheduledJobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a scheduled job
            /// </summary>
            /// <remarks>
            /// Create or update a scheduled job by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduledJobId'>
            /// Unique ID of the scheduled job.
            /// </param>
            /// <param name='body'>
            /// Scheduled job definition.
            /// </param>
            public static ScheduledJob Create(this IScheduledJobs operations, string scheduledJobId, ScheduledJob body)
            {
                return operations.CreateAsync(scheduledJobId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a scheduled job
            /// </summary>
            /// <remarks>
            /// Create or update a scheduled job by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduledJobId'>
            /// Unique ID of the scheduled job.
            /// </param>
            /// <param name='body'>
            /// Scheduled job definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduledJob> CreateAsync(this IScheduledJobs operations, string scheduledJobId, ScheduledJob body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(scheduledJobId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a scheduled job via patch
            /// </summary>
            /// <remarks>
            /// Update an existing scheduled job by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduledJobId'>
            /// Unique ID of the scheduled job.
            /// </param>
            /// <param name='body'>
            /// Scheduled job patch.
            /// </param>
            public static ScheduledJob Update(this IScheduledJobs operations, string scheduledJobId, object body)
            {
                return operations.UpdateAsync(scheduledJobId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a scheduled job via patch
            /// </summary>
            /// <remarks>
            /// Update an existing scheduled job by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduledJobId'>
            /// Unique ID of the scheduled job.
            /// </param>
            /// <param name='body'>
            /// Scheduled job patch.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduledJob> UpdateAsync(this IScheduledJobs operations, string scheduledJobId, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(scheduledJobId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a scheduled job
            /// </summary>
            /// <remarks>
            /// Delete an existing scheduled job by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduledJobId'>
            /// Unique ID of the scheduled job.
            /// </param>
            public static ScheduledJobsRemoveHeaders Remove(this IScheduledJobs operations, string scheduledJobId)
            {
                return operations.RemoveAsync(scheduledJobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a scheduled job
            /// </summary>
            /// <remarks>
            /// Delete an existing scheduled job by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduledJobId'>
            /// Unique ID of the scheduled job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduledJobsRemoveHeaders> RemoveAsync(this IScheduledJobs operations, string scheduledJobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveWithHttpMessagesAsync(scheduledJobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get the list of jobs for a scheduled job definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduledJobId'>
            /// Unique ID of the scheduled job.
            /// </param>
            public static JobCollection ListJobs(this IScheduledJobs operations, string scheduledJobId)
            {
                return operations.ListJobsAsync(scheduledJobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of jobs for a scheduled job definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduledJobId'>
            /// Unique ID of the scheduled job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobCollection> ListJobsAsync(this IScheduledJobs operations, string scheduledJobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListJobsWithHttpMessagesAsync(scheduledJobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
