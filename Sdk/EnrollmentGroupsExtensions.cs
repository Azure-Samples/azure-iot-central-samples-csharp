// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IoTCentral
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EnrollmentGroups.
    /// </summary>
    public static partial class EnrollmentGroupsExtensions
    {
            /// <summary>
            /// Get the list of enrollment groups in an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EnrollmentGroupCollection List(this IEnrollmentGroups operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of enrollment groups in an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrollmentGroupCollection> ListAsync(this IEnrollmentGroups operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an enrollment group by ID
            /// </summary>
            /// <remarks>
            /// Get details about an enrollment group by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            public static EnrollmentGroup Get(this IEnrollmentGroups operations, string enrollmentGroupId)
            {
                return operations.GetAsync(enrollmentGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an enrollment group by ID
            /// </summary>
            /// <remarks>
            /// Get details about an enrollment group by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrollmentGroup> GetAsync(this IEnrollmentGroups operations, string enrollmentGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(enrollmentGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an enrollment group
            /// </summary>
            /// <remarks>
            /// Create an enrollment group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='body'>
            /// Enrollment group body.
            /// </param>
            public static EnrollmentGroup Create(this IEnrollmentGroups operations, string enrollmentGroupId, EnrollmentGroup body)
            {
                return operations.CreateAsync(enrollmentGroupId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an enrollment group
            /// </summary>
            /// <remarks>
            /// Create an enrollment group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='body'>
            /// Enrollment group body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrollmentGroup> CreateAsync(this IEnrollmentGroups operations, string enrollmentGroupId, EnrollmentGroup body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(enrollmentGroupId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an enrollment group
            /// </summary>
            /// <remarks>
            /// Update an enrollment group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='body'>
            /// Enrollment group patch body.
            /// </param>
            public static EnrollmentGroup Update(this IEnrollmentGroups operations, string enrollmentGroupId, object body)
            {
                return operations.UpdateAsync(enrollmentGroupId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an enrollment group
            /// </summary>
            /// <remarks>
            /// Update an enrollment group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='body'>
            /// Enrollment group patch body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrollmentGroup> UpdateAsync(this IEnrollmentGroups operations, string enrollmentGroupId, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(enrollmentGroupId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an enrollment group
            /// </summary>
            /// <remarks>
            /// Delete an enrollment group by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            public static EnrollmentGroupsRemoveHeaders Remove(this IEnrollmentGroups operations, string enrollmentGroupId)
            {
                return operations.RemoveAsync(enrollmentGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an enrollment group
            /// </summary>
            /// <remarks>
            /// Delete an enrollment group by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrollmentGroupsRemoveHeaders> RemoveAsync(this IEnrollmentGroups operations, string enrollmentGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveWithHttpMessagesAsync(enrollmentGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get the primary or secondary x509 certificate of an enrollment group
            /// </summary>
            /// <remarks>
            /// Get details about the primary or secondary x509 certificate of an
            /// enrollment group, if it exists.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='entry'>
            /// Entry of certificate only support primary and secondary. Possible values
            /// include: 'Primary', 'Secondary'
            /// </param>
            public static SigningX509Certificate GetX509(this IEnrollmentGroups operations, string enrollmentGroupId, CertificateEntry entry)
            {
                return operations.GetX509Async(enrollmentGroupId, entry).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the primary or secondary x509 certificate of an enrollment group
            /// </summary>
            /// <remarks>
            /// Get details about the primary or secondary x509 certificate of an
            /// enrollment group, if it exists.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='entry'>
            /// Entry of certificate only support primary and secondary. Possible values
            /// include: 'Primary', 'Secondary'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SigningX509Certificate> GetX509Async(this IEnrollmentGroups operations, string enrollmentGroupId, CertificateEntry entry, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetX509WithHttpMessagesAsync(enrollmentGroupId, entry, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the primary or secondary x509 certificate of an enrollment group
            /// </summary>
            /// <remarks>
            /// Sets the primary or secondary x509 certificate of an enrollment group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='entry'>
            /// Entry of certificate only support primary and secondary. Possible values
            /// include: 'Primary', 'Secondary'
            /// </param>
            /// <param name='body'>
            /// Certificate definition.
            /// </param>
            public static SigningX509Certificate CreateX509(this IEnrollmentGroups operations, string enrollmentGroupId, CertificateEntry entry, SigningX509Certificate body)
            {
                return operations.CreateX509Async(enrollmentGroupId, entry, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the primary or secondary x509 certificate of an enrollment group
            /// </summary>
            /// <remarks>
            /// Sets the primary or secondary x509 certificate of an enrollment group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='entry'>
            /// Entry of certificate only support primary and secondary. Possible values
            /// include: 'Primary', 'Secondary'
            /// </param>
            /// <param name='body'>
            /// Certificate definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SigningX509Certificate> CreateX509Async(this IEnrollmentGroups operations, string enrollmentGroupId, CertificateEntry entry, SigningX509Certificate body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateX509WithHttpMessagesAsync(enrollmentGroupId, entry, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the primary or secondary x509 certificate of an enrollment group
            /// </summary>
            /// <remarks>
            /// Removes the primary or secondary x509 certificate of an enrollment group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='entry'>
            /// Entry of certificate only support primary and secondary. Possible values
            /// include: 'Primary', 'Secondary'
            /// </param>
            public static EnrollmentGroupsRemoveX509Headers RemoveX509(this IEnrollmentGroups operations, string enrollmentGroupId, CertificateEntry entry)
            {
                return operations.RemoveX509Async(enrollmentGroupId, entry).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the primary or secondary x509 certificate of an enrollment group
            /// </summary>
            /// <remarks>
            /// Removes the primary or secondary x509 certificate of an enrollment group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='entry'>
            /// Entry of certificate only support primary and secondary. Possible values
            /// include: 'Primary', 'Secondary'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrollmentGroupsRemoveX509Headers> RemoveX509Async(this IEnrollmentGroups operations, string enrollmentGroupId, CertificateEntry entry, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveX509WithHttpMessagesAsync(enrollmentGroupId, entry, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Generate a verification code for the primary or secondary x509 certificate
            /// of an enrollment group
            /// </summary>
            /// <remarks>
            /// Generate a verification code for the primary or secondary x509 certificate
            /// of an enrollment group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='entry'>
            /// Entry of certificate only support primary and secondary. Possible values
            /// include: 'Primary', 'Secondary'
            /// </param>
            public static X509VerificationCode GenerateVerificationCodeX509(this IEnrollmentGroups operations, string enrollmentGroupId, CertificateEntry entry)
            {
                return operations.GenerateVerificationCodeX509Async(enrollmentGroupId, entry).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generate a verification code for the primary or secondary x509 certificate
            /// of an enrollment group
            /// </summary>
            /// <remarks>
            /// Generate a verification code for the primary or secondary x509 certificate
            /// of an enrollment group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='entry'>
            /// Entry of certificate only support primary and secondary. Possible values
            /// include: 'Primary', 'Secondary'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509VerificationCode> GenerateVerificationCodeX509Async(this IEnrollmentGroups operations, string enrollmentGroupId, CertificateEntry entry, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateVerificationCodeX509WithHttpMessagesAsync(enrollmentGroupId, entry, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Verify the primary or secondary x509 certificate of an enrollment group
            /// </summary>
            /// <remarks>
            /// Verify the primary or secondary x509 certificate of an enrollment group by
            /// providing a certificate with the signed verification code.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='entry'>
            /// Entry of certificate only support primary and secondary. Possible values
            /// include: 'Primary', 'Secondary'
            /// </param>
            /// <param name='certificate'>
            /// The string representation of this certificate.
            /// </param>
            public static EnrollmentGroupsVerifyX509Headers VerifyX509(this IEnrollmentGroups operations, string enrollmentGroupId, CertificateEntry entry, string certificate)
            {
                return operations.VerifyX509Async(enrollmentGroupId, entry, certificate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Verify the primary or secondary x509 certificate of an enrollment group
            /// </summary>
            /// <remarks>
            /// Verify the primary or secondary x509 certificate of an enrollment group by
            /// providing a certificate with the signed verification code.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enrollmentGroupId'>
            /// Unique ID of the enrollment group.
            /// </param>
            /// <param name='entry'>
            /// Entry of certificate only support primary and secondary. Possible values
            /// include: 'Primary', 'Secondary'
            /// </param>
            /// <param name='certificate'>
            /// The string representation of this certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrollmentGroupsVerifyX509Headers> VerifyX509Async(this IEnrollmentGroups operations, string enrollmentGroupId, CertificateEntry entry, string certificate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VerifyX509WithHttpMessagesAsync(enrollmentGroupId, entry, certificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
