// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IoTCentral
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Organizations.
    /// </summary>
    public static partial class OrganizationsExtensions
    {
            /// <summary>
            /// Get the list of organizations the user has access to in an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static OrganizationCollection List(this IOrganizations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of organizations the user has access to in an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrganizationCollection> ListAsync(this IOrganizations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an organization by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// Unique ID for the organization.
            /// </param>
            public static Organization Get(this IOrganizations operations, string organizationId)
            {
                return operations.GetAsync(organizationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an organization by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// Unique ID for the organization.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Organization> GetAsync(this IOrganizations operations, string organizationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(organizationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an organization in the application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// Unique ID for the organization.
            /// </param>
            /// <param name='body'>
            /// Organization body.
            /// </param>
            public static Organization Create(this IOrganizations operations, string organizationId, Organization body)
            {
                return operations.CreateAsync(organizationId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an organization in the application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// Unique ID for the organization.
            /// </param>
            /// <param name='body'>
            /// Organization body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Organization> CreateAsync(this IOrganizations operations, string organizationId, Organization body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(organizationId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an organization in the application via patch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// Unique ID for the organization.
            /// </param>
            /// <param name='body'>
            /// Organization patch body.
            /// </param>
            public static Organization Update(this IOrganizations operations, string organizationId, object body)
            {
                return operations.UpdateAsync(organizationId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an organization in the application via patch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// Unique ID for the organization.
            /// </param>
            /// <param name='body'>
            /// Organization patch body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Organization> UpdateAsync(this IOrganizations operations, string organizationId, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(organizationId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// Unique ID for the organization.
            /// </param>
            public static OrganizationsRemoveHeaders Remove(this IOrganizations operations, string organizationId)
            {
                return operations.RemoveAsync(organizationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// Unique ID for the organization.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrganizationsRemoveHeaders> RemoveAsync(this IOrganizations operations, string organizationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveWithHttpMessagesAsync(organizationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
