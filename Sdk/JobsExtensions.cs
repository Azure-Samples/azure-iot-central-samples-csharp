// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IoTCentral
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Jobs.
    /// </summary>
    public static partial class JobsExtensions
    {
            /// <summary>
            /// Get the list of jobs in an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static JobCollection List(this IJobs operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of jobs in an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobCollection> ListAsync(this IJobs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a job by ID
            /// </summary>
            /// <remarks>
            /// Get details about a running or completed job by job ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Unique ID of the job.
            /// </param>
            public static Job Get(this IJobs operations, string jobId)
            {
                return operations.GetAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a job by ID
            /// </summary>
            /// <remarks>
            /// Get details about a running or completed job by job ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Unique ID of the job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> GetAsync(this IJobs operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute a new job
            /// </summary>
            /// <remarks>
            /// Create and execute a new job via its job definition.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Unique ID of the job.
            /// </param>
            /// <param name='body'>
            /// Job definition.
            /// </param>
            public static Job Create(this IJobs operations, string jobId, Job body)
            {
                return operations.CreateAsync(jobId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute a new job
            /// </summary>
            /// <remarks>
            /// Create and execute a new job via its job definition.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Unique ID of the job.
            /// </param>
            /// <param name='body'>
            /// Job definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> CreateAsync(this IJobs operations, string jobId, Job body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(jobId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get device statuses
            /// </summary>
            /// <remarks>
            /// Get the list of individual device statuses by job ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Unique ID of the job.
            /// </param>
            public static JobDeviceStatusCollection GetDevices(this IJobs operations, string jobId)
            {
                return operations.GetDevicesAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get device statuses
            /// </summary>
            /// <remarks>
            /// Get the list of individual device statuses by job ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Unique ID of the job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobDeviceStatusCollection> GetDevicesAsync(this IJobs operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDevicesWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Rerun a job on failed devices
            /// </summary>
            /// <remarks>
            /// Execute a rerun of an existing job on all failed devices.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Unique ID of the job.
            /// </param>
            /// <param name='rerunId'>
            /// Unique ID of the job rerun.
            /// </param>
            public static Job Rerun(this IJobs operations, string jobId, string rerunId)
            {
                return operations.RerunAsync(jobId, rerunId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rerun a job on failed devices
            /// </summary>
            /// <remarks>
            /// Execute a rerun of an existing job on all failed devices.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Unique ID of the job.
            /// </param>
            /// <param name='rerunId'>
            /// Unique ID of the job rerun.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> RerunAsync(this IJobs operations, string jobId, string rerunId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RerunWithHttpMessagesAsync(jobId, rerunId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resume a stopped job
            /// </summary>
            /// <remarks>
            /// Resume execution of an existing stopped job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Unique ID of the job.
            /// </param>
            public static JobsResumeHeaders Resume(this IJobs operations, string jobId)
            {
                return operations.ResumeAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resume a stopped job
            /// </summary>
            /// <remarks>
            /// Resume execution of an existing stopped job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Unique ID of the job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobsResumeHeaders> ResumeAsync(this IJobs operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Stop a running job
            /// </summary>
            /// <remarks>
            /// Stop execution of a job that is currently running.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Unique ID of the job.
            /// </param>
            public static JobsStopHeaders Stop(this IJobs operations, string jobId)
            {
                return operations.StopAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop a running job
            /// </summary>
            /// <remarks>
            /// Stop execution of a job that is currently running.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Unique ID of the job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobsStopHeaders> StopAsync(this IJobs operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
