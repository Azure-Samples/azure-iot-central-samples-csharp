// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IoTCentral
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Devices operations.
    /// </summary>
    public partial interface IDevices
    {
        /// <summary>
        /// Get the list of devices in an application with basic ODATA support
        /// ($top, $filter, $orderby), [more
        /// details](https://aka.ms/iotcentralodatasupport).
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceCollection,DevicesListHeaders>> ListWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a device by ID
        /// </summary>
        /// <remarks>
        /// Get details about an existing device by device ID.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Device,DevicesGetHeaders>> GetWithHttpMessagesAsync(string deviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create or update a device
        /// </summary>
        /// <remarks>
        /// Create a new device.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='body'>
        /// Device body.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Device,DevicesCreateHeaders>> CreateWithHttpMessagesAsync(string deviceId, Device body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a device via patch
        /// </summary>
        /// <remarks>
        /// Update an existing device by ID.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='body'>
        /// Device patch body.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Device,DevicesUpdateHeaders>> UpdateWithHttpMessagesAsync(string deviceId, object body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a device
        /// </summary>
        /// <remarks>
        /// Delete an existing device by device ID.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationHeaderResponse<DevicesRemoveHeaders>> RemoveWithHttpMessagesAsync(string deviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get device attestation
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Attestation,DevicesGetAttestationHeaders>> GetAttestationWithHttpMessagesAsync(string deviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create an individual device attestation
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='body'>
        /// Individual device attestation body.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Attestation,DevicesCreateAttestationHeaders>> CreateAttestationWithHttpMessagesAsync(string deviceId, Attestation body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an individual device attestation via patch
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='body'>
        /// Individual device attestation patch body.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Attestation,DevicesUpdateAttestationHeaders>> UpdateAttestationWithHttpMessagesAsync(string deviceId, object body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove an individual device attestation
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationHeaderResponse<DevicesRemoveAttestationHeaders>> RemoveAttestationWithHttpMessagesAsync(string deviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get device command history
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='commandName'>
        /// Name of this device command.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceCommandCollection,DevicesGetCommandHistoryHeaders>> GetCommandHistoryWithHttpMessagesAsync(string deviceId, string commandName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Run a device command
        /// </summary>
        /// <remarks>
        /// Run a command on a device.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='commandName'>
        /// Name of this device command.
        /// </param>
        /// <param name='body'>
        /// Device command body.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceCommand,DevicesRunCommandHeaders>> RunCommandWithHttpMessagesAsync(string deviceId, string commandName, DeviceCommand body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List the components present in a device
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Collection,DevicesListComponentsHeaders>> ListComponentsWithHttpMessagesAsync(string deviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get component command history
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='componentName'>
        /// Name of the device component.
        /// </param>
        /// <param name='commandName'>
        /// Name of this device command.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceCommandCollection,DevicesGetComponentCommandHistoryHeaders>> GetComponentCommandHistoryWithHttpMessagesAsync(string deviceId, string componentName, string commandName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Run a component command
        /// </summary>
        /// <remarks>
        /// Run a command on a component.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='componentName'>
        /// Name of the device component.
        /// </param>
        /// <param name='commandName'>
        /// Name of this device command.
        /// </param>
        /// <param name='body'>
        /// Device command body.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceCommand,DevicesRunComponentCommandHeaders>> RunComponentCommandWithHttpMessagesAsync(string deviceId, string componentName, string commandName, DeviceCommand body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get device properties for a specific component
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='componentName'>
        /// Name of the device component.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>,DevicesGetComponentPropertiesHeaders>> GetComponentPropertiesWithHttpMessagesAsync(string deviceId, string componentName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Replace device properties for a specific component
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='componentName'>
        /// Name of the device component.
        /// </param>
        /// <param name='body'>
        /// Device properties.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>,DevicesReplaceComponentPropertiesHeaders>> ReplaceComponentPropertiesWithHttpMessagesAsync(string deviceId, string componentName, IDictionary<string, object> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update device properties for a specific component via patch
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='componentName'>
        /// Name of the device component.
        /// </param>
        /// <param name='body'>
        /// Device properties patch.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>,DevicesUpdateComponentPropertiesHeaders>> UpdateComponentPropertiesWithHttpMessagesAsync(string deviceId, string componentName, object body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get component telemetry value
        /// </summary>
        /// <remarks>
        /// Get the last telemetry value from a component.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='componentName'>
        /// Name of the device component.
        /// </param>
        /// <param name='telemetryName'>
        /// Name of this device telemetry.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceTelemetry,DevicesGetComponentTelemetryValueHeaders>> GetComponentTelemetryValueWithHttpMessagesAsync(string deviceId, string componentName, string telemetryName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get device credentials
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceCredentials,DevicesGetCredentialsHeaders>> GetCredentialsWithHttpMessagesAsync(string deviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List the modules present in a device
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Collection,DevicesListModulesHeaders>> ListModulesWithHttpMessagesAsync(string deviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get module command history
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='moduleName'>
        /// Name of the device module.
        /// </param>
        /// <param name='commandName'>
        /// Name of this device command.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceCommandCollection,DevicesGetModuleCommandHistoryHeaders>> GetModuleCommandHistoryWithHttpMessagesAsync(string deviceId, string moduleName, string commandName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Run a module command
        /// </summary>
        /// <remarks>
        /// Run a command on a module.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='moduleName'>
        /// Name of the device module.
        /// </param>
        /// <param name='commandName'>
        /// Name of this device command.
        /// </param>
        /// <param name='body'>
        /// Device command body.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceCommand,DevicesRunModuleCommandHeaders>> RunModuleCommandWithHttpMessagesAsync(string deviceId, string moduleName, string commandName, DeviceCommand body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List the components present in a module
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='moduleName'>
        /// Name of the device module.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Collection,DevicesListModuleComponentsHeaders>> ListModuleComponentsWithHttpMessagesAsync(string deviceId, string moduleName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get module component command history
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='moduleName'>
        /// Name of the device module.
        /// </param>
        /// <param name='componentName'>
        /// Name of the device component.
        /// </param>
        /// <param name='commandName'>
        /// Name of this device command.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceCommandCollection,DevicesGetModuleComponentCommandHistoryHeaders>> GetModuleComponentCommandHistoryWithHttpMessagesAsync(string deviceId, string moduleName, string componentName, string commandName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Run a module component command
        /// </summary>
        /// <remarks>
        /// Run a command on a module.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='moduleName'>
        /// Name of the device module.
        /// </param>
        /// <param name='componentName'>
        /// Name of the device component.
        /// </param>
        /// <param name='commandName'>
        /// Name of this device command.
        /// </param>
        /// <param name='body'>
        /// Device command body.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceCommand,DevicesRunModuleComponentCommandHeaders>> RunModuleComponentCommandWithHttpMessagesAsync(string deviceId, string moduleName, string componentName, string commandName, DeviceCommand body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get module properties for a specific component
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='moduleName'>
        /// Name of the device module.
        /// </param>
        /// <param name='componentName'>
        /// Name of the device component.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>,DevicesGetModuleComponentPropertiesHeaders>> GetModuleComponentPropertiesWithHttpMessagesAsync(string deviceId, string moduleName, string componentName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Replace module properties for a specific component
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='moduleName'>
        /// Name of the device module.
        /// </param>
        /// <param name='componentName'>
        /// Name of the device component.
        /// </param>
        /// <param name='body'>
        /// Module properties.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>,DevicesReplaceModuleComponentPropertiesHeaders>> ReplaceModuleComponentPropertiesWithHttpMessagesAsync(string deviceId, string moduleName, string componentName, IDictionary<string, object> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update module properties for a specific component via patch
        /// </summary>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='moduleName'>
        /// Name of the device module.
        /// </param>
        /// <param name='componentName'>
        /// Name of the device component.
        /// </param>
        /// <param name='body'>
        /// Module properties patch.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>,DevicesUpdateModuleComponentPropertiesHeaders>> UpdateModuleComponentPropertiesWithHttpMessagesAsync(string deviceId, string moduleName, string componentName, object body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get module component telemetry value
        /// </summary>
        /// <remarks>
        /// Get the last telemetry value from a module component.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='moduleName'>
        /// Name of the device module.
        /// </param>
        /// <param name='componentName'>
        /// Name of the device component.
        /// </param>
        /// <param name='telemetryName'>
        /// Name of this device telemetry.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceTelemetry,DevicesGetModuleComponentTelemetryValueHeaders>> GetModuleComponentTelemetryValueWithHttpMessagesAsync(string deviceId, string moduleName, string componentName, string telemetryName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get module properties
        /// </summary>
        /// <remarks>
        /// Get all property values of a module.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='moduleName'>
        /// Name of the device module.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>,DevicesGetModulePropertiesHeaders>> GetModulePropertiesWithHttpMessagesAsync(string deviceId, string moduleName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Replace module properties
        /// </summary>
        /// <remarks>
        /// Replace all property values of a module.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='moduleName'>
        /// Name of the device module.
        /// </param>
        /// <param name='body'>
        /// Module properties.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>,DevicesReplaceModulePropertiesHeaders>> ReplaceModulePropertiesWithHttpMessagesAsync(string deviceId, string moduleName, IDictionary<string, object> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update module properties via patch
        /// </summary>
        /// <remarks>
        /// Update property values of a module.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='moduleName'>
        /// Name of the device module.
        /// </param>
        /// <param name='body'>
        /// Module properties patch.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>,DevicesUpdateModulePropertiesHeaders>> UpdateModulePropertiesWithHttpMessagesAsync(string deviceId, string moduleName, object body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get module telemetry value
        /// </summary>
        /// <remarks>
        /// Get the last telemetry value from a module.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='moduleName'>
        /// Name of the device module.
        /// </param>
        /// <param name='telemetryName'>
        /// Name of this device telemetry.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceTelemetry,DevicesGetModuleTelemetryValueHeaders>> GetModuleTelemetryValueWithHttpMessagesAsync(string deviceId, string moduleName, string telemetryName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get device properties
        /// </summary>
        /// <remarks>
        /// Get all property values of a device by device ID.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>,DevicesGetPropertiesHeaders>> GetPropertiesWithHttpMessagesAsync(string deviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Replace device properties
        /// </summary>
        /// <remarks>
        /// Replace all property values of a device by device ID.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='body'>
        /// Device properties.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>,DevicesReplacePropertiesHeaders>> ReplacePropertiesWithHttpMessagesAsync(string deviceId, IDictionary<string, object> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update device properties via patch
        /// </summary>
        /// <remarks>
        /// Update property values of a device by device ID.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='body'>
        /// Device properties patch.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IDictionary<string, object>,DevicesUpdatePropertiesHeaders>> UpdatePropertiesWithHttpMessagesAsync(string deviceId, object body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Given the ID for an upstream device, will return the upstream and
        /// the downstream relationships associated with that gateway. These
        /// downstream relationships are only those associated with the direct
        /// downstream level (they don’t work recursively).
        /// </summary>
        /// <remarks>
        /// List all relationships based on device ID
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceRelationshipCollection,DevicesListRelationshipsHeaders>> ListRelationshipsWithHttpMessagesAsync(string deviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Given the ID for a device and a relationship ID associated with
        /// this device, get the details of the relationship.
        /// </summary>
        /// <remarks>
        /// Get device relationship by ID
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='relationshipId'>
        /// Unique ID of a relationship between devices.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceRelationship,DevicesGetRelationshipHeaders>> GetRelationshipWithHttpMessagesAsync(string deviceId, string relationshipId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Given the ID for a device and a relationship ID associated with
        /// this device, create a new relationship for between the given device
        /// and a second device specified in the body.
        /// </summary>
        /// <remarks>
        /// Create a device relationship
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='relationshipId'>
        /// Unique ID of a relationship between devices.
        /// </param>
        /// <param name='body'>
        /// Device relationship body.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceRelationship,DevicesCreateRelationshipHeaders>> CreateRelationshipWithHttpMessagesAsync(string deviceId, string relationshipId, DeviceRelationship body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Patch a given relationship given the relationship ID and a given
        /// device ID.
        /// </summary>
        /// <remarks>
        /// Update device relationship
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='relationshipId'>
        /// Unique ID of a relationship between devices.
        /// </param>
        /// <param name='body'>
        /// Device relationship patch body.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceRelationship,DevicesUpdateRelationshipHeaders>> UpdateRelationshipWithHttpMessagesAsync(string deviceId, string relationshipId, object body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Given the ID for a device and an associated relationship ID, delete
        /// the relationship. The given device ID can be that of the upstream
        /// or downstream device.
        /// </summary>
        /// <remarks>
        /// Delete a device relationship
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='relationshipId'>
        /// Unique ID of a relationship between devices.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationHeaderResponse<DevicesRemoveRelationshipHeaders>> RemoveRelationshipWithHttpMessagesAsync(string deviceId, string relationshipId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get device telemetry value
        /// </summary>
        /// <remarks>
        /// Get the last telemetry value from a device.
        /// </remarks>
        /// <param name='deviceId'>
        /// Unique ID of the device.
        /// </param>
        /// <param name='telemetryName'>
        /// Name of this device telemetry.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DeviceTelemetry,DevicesGetTelemetryValueHeaders>> GetTelemetryValueWithHttpMessagesAsync(string deviceId, string telemetryName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
