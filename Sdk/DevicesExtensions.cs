// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IoTCentral
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Devices.
    /// </summary>
    public static partial class DevicesExtensions
    {
            /// <summary>
            /// Get the list of devices in an application with basic ODATA support ($top,
            /// $filter, $orderby), [more details](https://aka.ms/iotcentralodatasupport).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static DeviceCollection List(this IDevices operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of devices in an application with basic ODATA support ($top,
            /// $filter, $orderby), [more details](https://aka.ms/iotcentralodatasupport).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceCollection> ListAsync(this IDevices operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a device by ID
            /// </summary>
            /// <remarks>
            /// Get details about an existing device by device ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            public static Device Get(this IDevices operations, string deviceId)
            {
                return operations.GetAsync(deviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a device by ID
            /// </summary>
            /// <remarks>
            /// Get details about an existing device by device ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Device> GetAsync(this IDevices operations, string deviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(deviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a device
            /// </summary>
            /// <remarks>
            /// Create a new device.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='body'>
            /// Device body.
            /// </param>
            public static Device Create(this IDevices operations, string deviceId, Device body)
            {
                return operations.CreateAsync(deviceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a device
            /// </summary>
            /// <remarks>
            /// Create a new device.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='body'>
            /// Device body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Device> CreateAsync(this IDevices operations, string deviceId, Device body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(deviceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a device via patch
            /// </summary>
            /// <remarks>
            /// Update an existing device by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='body'>
            /// Device patch body.
            /// </param>
            public static Device Update(this IDevices operations, string deviceId, object body)
            {
                return operations.UpdateAsync(deviceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a device via patch
            /// </summary>
            /// <remarks>
            /// Update an existing device by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='body'>
            /// Device patch body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Device> UpdateAsync(this IDevices operations, string deviceId, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(deviceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a device
            /// </summary>
            /// <remarks>
            /// Delete an existing device by device ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            public static DevicesRemoveHeaders Remove(this IDevices operations, string deviceId)
            {
                return operations.RemoveAsync(deviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a device
            /// </summary>
            /// <remarks>
            /// Delete an existing device by device ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DevicesRemoveHeaders> RemoveAsync(this IDevices operations, string deviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveWithHttpMessagesAsync(deviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get device attestation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            public static Attestation GetAttestation(this IDevices operations, string deviceId)
            {
                return operations.GetAttestationAsync(deviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get device attestation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attestation> GetAttestationAsync(this IDevices operations, string deviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttestationWithHttpMessagesAsync(deviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an individual device attestation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='body'>
            /// Individual device attestation body.
            /// </param>
            public static Attestation CreateAttestation(this IDevices operations, string deviceId, Attestation body)
            {
                return operations.CreateAttestationAsync(deviceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an individual device attestation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='body'>
            /// Individual device attestation body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attestation> CreateAttestationAsync(this IDevices operations, string deviceId, Attestation body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAttestationWithHttpMessagesAsync(deviceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an individual device attestation via patch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='body'>
            /// Individual device attestation patch body.
            /// </param>
            public static Attestation UpdateAttestation(this IDevices operations, string deviceId, object body)
            {
                return operations.UpdateAttestationAsync(deviceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an individual device attestation via patch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='body'>
            /// Individual device attestation patch body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attestation> UpdateAttestationAsync(this IDevices operations, string deviceId, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAttestationWithHttpMessagesAsync(deviceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove an individual device attestation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            public static DevicesRemoveAttestationHeaders RemoveAttestation(this IDevices operations, string deviceId)
            {
                return operations.RemoveAttestationAsync(deviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove an individual device attestation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DevicesRemoveAttestationHeaders> RemoveAttestationAsync(this IDevices operations, string deviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveAttestationWithHttpMessagesAsync(deviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get device command history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            public static DeviceCommandCollection GetCommandHistory(this IDevices operations, string deviceId, string commandName)
            {
                return operations.GetCommandHistoryAsync(deviceId, commandName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get device command history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceCommandCollection> GetCommandHistoryAsync(this IDevices operations, string deviceId, string commandName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCommandHistoryWithHttpMessagesAsync(deviceId, commandName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Run a device command
            /// </summary>
            /// <remarks>
            /// Run a command on a device.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            /// <param name='body'>
            /// Device command body.
            /// </param>
            public static DeviceCommand RunCommand(this IDevices operations, string deviceId, string commandName, DeviceCommand body)
            {
                return operations.RunCommandAsync(deviceId, commandName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Run a device command
            /// </summary>
            /// <remarks>
            /// Run a command on a device.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            /// <param name='body'>
            /// Device command body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceCommand> RunCommandAsync(this IDevices operations, string deviceId, string commandName, DeviceCommand body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RunCommandWithHttpMessagesAsync(deviceId, commandName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the components present in a device
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            public static Collection ListComponents(this IDevices operations, string deviceId)
            {
                return operations.ListComponentsAsync(deviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the components present in a device
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Collection> ListComponentsAsync(this IDevices operations, string deviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListComponentsWithHttpMessagesAsync(deviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get component command history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            public static DeviceCommandCollection GetComponentCommandHistory(this IDevices operations, string deviceId, string componentName, string commandName)
            {
                return operations.GetComponentCommandHistoryAsync(deviceId, componentName, commandName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get component command history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceCommandCollection> GetComponentCommandHistoryAsync(this IDevices operations, string deviceId, string componentName, string commandName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComponentCommandHistoryWithHttpMessagesAsync(deviceId, componentName, commandName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Run a component command
            /// </summary>
            /// <remarks>
            /// Run a command on a component.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            /// <param name='body'>
            /// Device command body.
            /// </param>
            public static DeviceCommand RunComponentCommand(this IDevices operations, string deviceId, string componentName, string commandName, DeviceCommand body)
            {
                return operations.RunComponentCommandAsync(deviceId, componentName, commandName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Run a component command
            /// </summary>
            /// <remarks>
            /// Run a command on a component.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            /// <param name='body'>
            /// Device command body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceCommand> RunComponentCommandAsync(this IDevices operations, string deviceId, string componentName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RunComponentCommandWithHttpMessagesAsync(deviceId, componentName, commandName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get device properties for a specific component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            public static IDictionary<string, object> GetComponentProperties(this IDevices operations, string deviceId, string componentName)
            {
                return operations.GetComponentPropertiesAsync(deviceId, componentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get device properties for a specific component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> GetComponentPropertiesAsync(this IDevices operations, string deviceId, string componentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComponentPropertiesWithHttpMessagesAsync(deviceId, componentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace device properties for a specific component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='body'>
            /// Device properties.
            /// </param>
            public static IDictionary<string, object> ReplaceComponentProperties(this IDevices operations, string deviceId, string componentName, IDictionary<string, object> body)
            {
                return operations.ReplaceComponentPropertiesAsync(deviceId, componentName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace device properties for a specific component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='body'>
            /// Device properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ReplaceComponentPropertiesAsync(this IDevices operations, string deviceId, string componentName, IDictionary<string, object> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceComponentPropertiesWithHttpMessagesAsync(deviceId, componentName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update device properties for a specific component via patch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='body'>
            /// Device properties patch.
            /// </param>
            public static IDictionary<string, object> UpdateComponentProperties(this IDevices operations, string deviceId, string componentName, object body)
            {
                return operations.UpdateComponentPropertiesAsync(deviceId, componentName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update device properties for a specific component via patch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='body'>
            /// Device properties patch.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> UpdateComponentPropertiesAsync(this IDevices operations, string deviceId, string componentName, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateComponentPropertiesWithHttpMessagesAsync(deviceId, componentName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get component telemetry value
            /// </summary>
            /// <remarks>
            /// Get the last telemetry value from a component.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='telemetryName'>
            /// Name of this device telemetry.
            /// </param>
            public static DeviceTelemetry GetComponentTelemetryValue(this IDevices operations, string deviceId, string componentName, string telemetryName)
            {
                return operations.GetComponentTelemetryValueAsync(deviceId, componentName, telemetryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get component telemetry value
            /// </summary>
            /// <remarks>
            /// Get the last telemetry value from a component.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='telemetryName'>
            /// Name of this device telemetry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceTelemetry> GetComponentTelemetryValueAsync(this IDevices operations, string deviceId, string componentName, string telemetryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComponentTelemetryValueWithHttpMessagesAsync(deviceId, componentName, telemetryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get device credentials
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            public static DeviceCredentials GetCredentials(this IDevices operations, string deviceId)
            {
                return operations.GetCredentialsAsync(deviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get device credentials
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceCredentials> GetCredentialsAsync(this IDevices operations, string deviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCredentialsWithHttpMessagesAsync(deviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the modules present in a device
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            public static Collection ListModules(this IDevices operations, string deviceId)
            {
                return operations.ListModulesAsync(deviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the modules present in a device
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Collection> ListModulesAsync(this IDevices operations, string deviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListModulesWithHttpMessagesAsync(deviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get module command history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            public static DeviceCommandCollection GetModuleCommandHistory(this IDevices operations, string deviceId, string moduleName, string commandName)
            {
                return operations.GetModuleCommandHistoryAsync(deviceId, moduleName, commandName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get module command history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceCommandCollection> GetModuleCommandHistoryAsync(this IDevices operations, string deviceId, string moduleName, string commandName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModuleCommandHistoryWithHttpMessagesAsync(deviceId, moduleName, commandName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Run a module command
            /// </summary>
            /// <remarks>
            /// Run a command on a module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            /// <param name='body'>
            /// Device command body.
            /// </param>
            public static DeviceCommand RunModuleCommand(this IDevices operations, string deviceId, string moduleName, string commandName, DeviceCommand body)
            {
                return operations.RunModuleCommandAsync(deviceId, moduleName, commandName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Run a module command
            /// </summary>
            /// <remarks>
            /// Run a command on a module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            /// <param name='body'>
            /// Device command body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceCommand> RunModuleCommandAsync(this IDevices operations, string deviceId, string moduleName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RunModuleCommandWithHttpMessagesAsync(deviceId, moduleName, commandName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the components present in a module
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            public static Collection ListModuleComponents(this IDevices operations, string deviceId, string moduleName)
            {
                return operations.ListModuleComponentsAsync(deviceId, moduleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the components present in a module
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Collection> ListModuleComponentsAsync(this IDevices operations, string deviceId, string moduleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListModuleComponentsWithHttpMessagesAsync(deviceId, moduleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get module component command history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            public static DeviceCommandCollection GetModuleComponentCommandHistory(this IDevices operations, string deviceId, string moduleName, string componentName, string commandName)
            {
                return operations.GetModuleComponentCommandHistoryAsync(deviceId, moduleName, componentName, commandName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get module component command history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceCommandCollection> GetModuleComponentCommandHistoryAsync(this IDevices operations, string deviceId, string moduleName, string componentName, string commandName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModuleComponentCommandHistoryWithHttpMessagesAsync(deviceId, moduleName, componentName, commandName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Run a module component command
            /// </summary>
            /// <remarks>
            /// Run a command on a module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            /// <param name='body'>
            /// Device command body.
            /// </param>
            public static DeviceCommand RunModuleComponentCommand(this IDevices operations, string deviceId, string moduleName, string componentName, string commandName, DeviceCommand body)
            {
                return operations.RunModuleComponentCommandAsync(deviceId, moduleName, componentName, commandName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Run a module component command
            /// </summary>
            /// <remarks>
            /// Run a command on a module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='commandName'>
            /// Name of this device command.
            /// </param>
            /// <param name='body'>
            /// Device command body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceCommand> RunModuleComponentCommandAsync(this IDevices operations, string deviceId, string moduleName, string componentName, string commandName, DeviceCommand body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RunModuleComponentCommandWithHttpMessagesAsync(deviceId, moduleName, componentName, commandName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get module properties for a specific component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            public static IDictionary<string, object> GetModuleComponentProperties(this IDevices operations, string deviceId, string moduleName, string componentName)
            {
                return operations.GetModuleComponentPropertiesAsync(deviceId, moduleName, componentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get module properties for a specific component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> GetModuleComponentPropertiesAsync(this IDevices operations, string deviceId, string moduleName, string componentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModuleComponentPropertiesWithHttpMessagesAsync(deviceId, moduleName, componentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace module properties for a specific component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='body'>
            /// Module properties.
            /// </param>
            public static IDictionary<string, object> ReplaceModuleComponentProperties(this IDevices operations, string deviceId, string moduleName, string componentName, IDictionary<string, object> body)
            {
                return operations.ReplaceModuleComponentPropertiesAsync(deviceId, moduleName, componentName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace module properties for a specific component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='body'>
            /// Module properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ReplaceModuleComponentPropertiesAsync(this IDevices operations, string deviceId, string moduleName, string componentName, IDictionary<string, object> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceModuleComponentPropertiesWithHttpMessagesAsync(deviceId, moduleName, componentName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update module properties for a specific component via patch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='body'>
            /// Module properties patch.
            /// </param>
            public static IDictionary<string, object> UpdateModuleComponentProperties(this IDevices operations, string deviceId, string moduleName, string componentName, object body)
            {
                return operations.UpdateModuleComponentPropertiesAsync(deviceId, moduleName, componentName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update module properties for a specific component via patch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='body'>
            /// Module properties patch.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> UpdateModuleComponentPropertiesAsync(this IDevices operations, string deviceId, string moduleName, string componentName, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateModuleComponentPropertiesWithHttpMessagesAsync(deviceId, moduleName, componentName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get module component telemetry value
            /// </summary>
            /// <remarks>
            /// Get the last telemetry value from a module component.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='telemetryName'>
            /// Name of this device telemetry.
            /// </param>
            public static DeviceTelemetry GetModuleComponentTelemetryValue(this IDevices operations, string deviceId, string moduleName, string componentName, string telemetryName)
            {
                return operations.GetModuleComponentTelemetryValueAsync(deviceId, moduleName, componentName, telemetryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get module component telemetry value
            /// </summary>
            /// <remarks>
            /// Get the last telemetry value from a module component.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='componentName'>
            /// Name of the device component.
            /// </param>
            /// <param name='telemetryName'>
            /// Name of this device telemetry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceTelemetry> GetModuleComponentTelemetryValueAsync(this IDevices operations, string deviceId, string moduleName, string componentName, string telemetryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModuleComponentTelemetryValueWithHttpMessagesAsync(deviceId, moduleName, componentName, telemetryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get module properties
            /// </summary>
            /// <remarks>
            /// Get all property values of a module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            public static IDictionary<string, object> GetModuleProperties(this IDevices operations, string deviceId, string moduleName)
            {
                return operations.GetModulePropertiesAsync(deviceId, moduleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get module properties
            /// </summary>
            /// <remarks>
            /// Get all property values of a module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> GetModulePropertiesAsync(this IDevices operations, string deviceId, string moduleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModulePropertiesWithHttpMessagesAsync(deviceId, moduleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace module properties
            /// </summary>
            /// <remarks>
            /// Replace all property values of a module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='body'>
            /// Module properties.
            /// </param>
            public static IDictionary<string, object> ReplaceModuleProperties(this IDevices operations, string deviceId, string moduleName, IDictionary<string, object> body)
            {
                return operations.ReplaceModulePropertiesAsync(deviceId, moduleName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace module properties
            /// </summary>
            /// <remarks>
            /// Replace all property values of a module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='body'>
            /// Module properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ReplaceModulePropertiesAsync(this IDevices operations, string deviceId, string moduleName, IDictionary<string, object> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceModulePropertiesWithHttpMessagesAsync(deviceId, moduleName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update module properties via patch
            /// </summary>
            /// <remarks>
            /// Update property values of a module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='body'>
            /// Module properties patch.
            /// </param>
            public static IDictionary<string, object> UpdateModuleProperties(this IDevices operations, string deviceId, string moduleName, object body)
            {
                return operations.UpdateModulePropertiesAsync(deviceId, moduleName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update module properties via patch
            /// </summary>
            /// <remarks>
            /// Update property values of a module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='body'>
            /// Module properties patch.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> UpdateModulePropertiesAsync(this IDevices operations, string deviceId, string moduleName, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateModulePropertiesWithHttpMessagesAsync(deviceId, moduleName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get module telemetry value
            /// </summary>
            /// <remarks>
            /// Get the last telemetry value from a module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='telemetryName'>
            /// Name of this device telemetry.
            /// </param>
            public static DeviceTelemetry GetModuleTelemetryValue(this IDevices operations, string deviceId, string moduleName, string telemetryName)
            {
                return operations.GetModuleTelemetryValueAsync(deviceId, moduleName, telemetryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get module telemetry value
            /// </summary>
            /// <remarks>
            /// Get the last telemetry value from a module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='moduleName'>
            /// Name of the device module.
            /// </param>
            /// <param name='telemetryName'>
            /// Name of this device telemetry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceTelemetry> GetModuleTelemetryValueAsync(this IDevices operations, string deviceId, string moduleName, string telemetryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModuleTelemetryValueWithHttpMessagesAsync(deviceId, moduleName, telemetryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get device properties
            /// </summary>
            /// <remarks>
            /// Get all property values of a device by device ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            public static IDictionary<string, object> GetProperties(this IDevices operations, string deviceId)
            {
                return operations.GetPropertiesAsync(deviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get device properties
            /// </summary>
            /// <remarks>
            /// Get all property values of a device by device ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> GetPropertiesAsync(this IDevices operations, string deviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertiesWithHttpMessagesAsync(deviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace device properties
            /// </summary>
            /// <remarks>
            /// Replace all property values of a device by device ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='body'>
            /// Device properties.
            /// </param>
            public static IDictionary<string, object> ReplaceProperties(this IDevices operations, string deviceId, IDictionary<string, object> body)
            {
                return operations.ReplacePropertiesAsync(deviceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace device properties
            /// </summary>
            /// <remarks>
            /// Replace all property values of a device by device ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='body'>
            /// Device properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ReplacePropertiesAsync(this IDevices operations, string deviceId, IDictionary<string, object> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplacePropertiesWithHttpMessagesAsync(deviceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update device properties via patch
            /// </summary>
            /// <remarks>
            /// Update property values of a device by device ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='body'>
            /// Device properties patch.
            /// </param>
            public static IDictionary<string, object> UpdateProperties(this IDevices operations, string deviceId, object body)
            {
                return operations.UpdatePropertiesAsync(deviceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update device properties via patch
            /// </summary>
            /// <remarks>
            /// Update property values of a device by device ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='body'>
            /// Device properties patch.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> UpdatePropertiesAsync(this IDevices operations, string deviceId, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePropertiesWithHttpMessagesAsync(deviceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Given the ID for an upstream device, will return the upstream and the
            /// downstream relationships associated with that gateway. These downstream
            /// relationships are only those associated with the direct downstream level
            /// (they don’t work recursively).
            /// </summary>
            /// <remarks>
            /// List all relationships based on device ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            public static DeviceRelationshipCollection ListRelationships(this IDevices operations, string deviceId)
            {
                return operations.ListRelationshipsAsync(deviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Given the ID for an upstream device, will return the upstream and the
            /// downstream relationships associated with that gateway. These downstream
            /// relationships are only those associated with the direct downstream level
            /// (they don’t work recursively).
            /// </summary>
            /// <remarks>
            /// List all relationships based on device ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceRelationshipCollection> ListRelationshipsAsync(this IDevices operations, string deviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRelationshipsWithHttpMessagesAsync(deviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Given the ID for a device and a relationship ID associated with this
            /// device, get the details of the relationship.
            /// </summary>
            /// <remarks>
            /// Get device relationship by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='relationshipId'>
            /// Unique ID of a relationship between devices.
            /// </param>
            public static DeviceRelationship GetRelationship(this IDevices operations, string deviceId, string relationshipId)
            {
                return operations.GetRelationshipAsync(deviceId, relationshipId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Given the ID for a device and a relationship ID associated with this
            /// device, get the details of the relationship.
            /// </summary>
            /// <remarks>
            /// Get device relationship by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='relationshipId'>
            /// Unique ID of a relationship between devices.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceRelationship> GetRelationshipAsync(this IDevices operations, string deviceId, string relationshipId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelationshipWithHttpMessagesAsync(deviceId, relationshipId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Given the ID for a device and a relationship ID associated with this
            /// device, create a new relationship for between the given device and a second
            /// device specified in the body.
            /// </summary>
            /// <remarks>
            /// Create a device relationship
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='relationshipId'>
            /// Unique ID of a relationship between devices.
            /// </param>
            /// <param name='body'>
            /// Device relationship body.
            /// </param>
            public static DeviceRelationship CreateRelationship(this IDevices operations, string deviceId, string relationshipId, DeviceRelationship body)
            {
                return operations.CreateRelationshipAsync(deviceId, relationshipId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Given the ID for a device and a relationship ID associated with this
            /// device, create a new relationship for between the given device and a second
            /// device specified in the body.
            /// </summary>
            /// <remarks>
            /// Create a device relationship
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='relationshipId'>
            /// Unique ID of a relationship between devices.
            /// </param>
            /// <param name='body'>
            /// Device relationship body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceRelationship> CreateRelationshipAsync(this IDevices operations, string deviceId, string relationshipId, DeviceRelationship body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRelationshipWithHttpMessagesAsync(deviceId, relationshipId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch a given relationship given the relationship ID and a given device ID.
            /// </summary>
            /// <remarks>
            /// Update device relationship
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='relationshipId'>
            /// Unique ID of a relationship between devices.
            /// </param>
            /// <param name='body'>
            /// Device relationship patch body.
            /// </param>
            public static DeviceRelationship UpdateRelationship(this IDevices operations, string deviceId, string relationshipId, object body)
            {
                return operations.UpdateRelationshipAsync(deviceId, relationshipId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch a given relationship given the relationship ID and a given device ID.
            /// </summary>
            /// <remarks>
            /// Update device relationship
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='relationshipId'>
            /// Unique ID of a relationship between devices.
            /// </param>
            /// <param name='body'>
            /// Device relationship patch body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceRelationship> UpdateRelationshipAsync(this IDevices operations, string deviceId, string relationshipId, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRelationshipWithHttpMessagesAsync(deviceId, relationshipId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Given the ID for a device and an associated relationship ID, delete the
            /// relationship. The given device ID can be that of the upstream or downstream
            /// device.
            /// </summary>
            /// <remarks>
            /// Delete a device relationship
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='relationshipId'>
            /// Unique ID of a relationship between devices.
            /// </param>
            public static DevicesRemoveRelationshipHeaders RemoveRelationship(this IDevices operations, string deviceId, string relationshipId)
            {
                return operations.RemoveRelationshipAsync(deviceId, relationshipId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Given the ID for a device and an associated relationship ID, delete the
            /// relationship. The given device ID can be that of the upstream or downstream
            /// device.
            /// </summary>
            /// <remarks>
            /// Delete a device relationship
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='relationshipId'>
            /// Unique ID of a relationship between devices.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DevicesRemoveRelationshipHeaders> RemoveRelationshipAsync(this IDevices operations, string deviceId, string relationshipId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveRelationshipWithHttpMessagesAsync(deviceId, relationshipId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get device telemetry value
            /// </summary>
            /// <remarks>
            /// Get the last telemetry value from a device.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='telemetryName'>
            /// Name of this device telemetry.
            /// </param>
            public static DeviceTelemetry GetTelemetryValue(this IDevices operations, string deviceId, string telemetryName)
            {
                return operations.GetTelemetryValueAsync(deviceId, telemetryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get device telemetry value
            /// </summary>
            /// <remarks>
            /// Get the last telemetry value from a device.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// Unique ID of the device.
            /// </param>
            /// <param name='telemetryName'>
            /// Name of this device telemetry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceTelemetry> GetTelemetryValueAsync(this IDevices operations, string deviceId, string telemetryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTelemetryValueWithHttpMessagesAsync(deviceId, telemetryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
