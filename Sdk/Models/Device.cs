// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IoTCentral.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The device definition.
    /// </summary>
    public partial class Device
    {
        /// <summary>
        /// Initializes a new instance of the Device class.
        /// </summary>
        public Device()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Device class.
        /// </summary>
        /// <param name="id">Unique ID of the device.</param>
        /// <param name="etag">ETag used to prevent conflict in device
        /// updates.</param>
        /// <param name="displayName">Display name of the device.</param>
        /// <param name="template">The device template definition for the
        /// device.</param>
        /// <param name="enabled">Whether the device connection to IoT Central
        /// has been enabled.</param>
        /// <param name="provisioned">Whether resources have been allocated for
        /// the device.</param>
        /// <param name="simulated">Whether the device is simulated.</param>
        /// <param name="organizations">List of organization IDs that the
        /// device is a part of, only one organization is supported today,
        /// multiple organizations will be supported soon.</param>
        public Device(string id = default(string), string etag = default(string), string displayName = default(string), string template = default(string), bool? enabled = default(bool?), bool? provisioned = default(bool?), bool? simulated = default(bool?), IList<string> organizations = default(IList<string>))
        {
            Id = id;
            Etag = etag;
            DisplayName = displayName;
            Template = template;
            Enabled = enabled;
            Provisioned = provisioned;
            Simulated = simulated;
            Organizations = organizations;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets unique ID of the device.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets eTag used to prevent conflict in device updates.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or sets display name of the device.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the device template definition for the device.
        /// </summary>
        [JsonProperty(PropertyName = "template")]
        public string Template { get; set; }

        /// <summary>
        /// Gets or sets whether the device connection to IoT Central has been
        /// enabled.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets whether resources have been allocated for the device.
        /// </summary>
        [JsonProperty(PropertyName = "provisioned")]
        public bool? Provisioned { get; private set; }

        /// <summary>
        /// Gets or sets whether the device is simulated.
        /// </summary>
        [JsonProperty(PropertyName = "simulated")]
        public bool? Simulated { get; set; }

        /// <summary>
        /// Gets or sets list of organization IDs that the device is a part of,
        /// only one organization is supported today, multiple organizations
        /// will be supported soon.
        /// </summary>
        [JsonProperty(PropertyName = "organizations")]
        public IList<string> Organizations { get; set; }

    }
}
