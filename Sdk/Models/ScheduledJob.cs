// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IoTCentral.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The scheduled job definition.
    /// </summary>
    public partial class ScheduledJob
    {
        /// <summary>
        /// Initializes a new instance of the ScheduledJob class.
        /// </summary>
        public ScheduledJob()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScheduledJob class.
        /// </summary>
        /// <param name="group">The ID of the device group on which to execute
        /// the scheduled job.</param>
        /// <param name="data">Data related to the operation being performed by
        /// this job. All entries must be of the same type.</param>
        /// <param name="schedule">The schedule at which to execute the
        /// job.</param>
        /// <param name="etag">ETag used to prevent conflict in scheduled job
        /// updates.</param>
        /// <param name="id">Unique ID of the scheduled job.</param>
        /// <param name="displayName">Display name of the scheduled
        /// job.</param>
        /// <param name="description">Detailed description of the scheduled
        /// job.</param>
        /// <param name="batch">The batching configuration for the scheduled
        /// job.</param>
        /// <param name="cancellationThreshold">The cancellation threshold for
        /// the scheduled job.</param>
        /// <param name="organizations">List of organizations of the job, only
        /// one organization is supported today, multiple organizations will be
        /// supported soon.</param>
        /// <param name="enabled">Whether the scheduled job is enabled.</param>
        /// <param name="completed">Whether the scheduled job has
        /// completed.</param>
        public ScheduledJob(string group, IList<JobData> data, JobSchedule schedule, string etag = default(string), string id = default(string), string displayName = default(string), string description = default(string), JobBatch batch = default(JobBatch), JobCancellationThreshold cancellationThreshold = default(JobCancellationThreshold), IList<string> organizations = default(IList<string>), bool? enabled = default(bool?), bool? completed = default(bool?))
        {
            Etag = etag;
            Id = id;
            DisplayName = displayName;
            Description = description;
            Group = group;
            Batch = batch;
            CancellationThreshold = cancellationThreshold;
            Data = data;
            Organizations = organizations;
            Schedule = schedule;
            Enabled = enabled;
            Completed = completed;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets eTag used to prevent conflict in scheduled job
        /// updates.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

        /// <summary>
        /// Gets unique ID of the scheduled job.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets display name of the scheduled job.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets detailed description of the scheduled job.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the ID of the device group on which to execute the
        /// scheduled job.
        /// </summary>
        [JsonProperty(PropertyName = "group")]
        public string Group { get; set; }

        /// <summary>
        /// Gets or sets the batching configuration for the scheduled job.
        /// </summary>
        [JsonProperty(PropertyName = "batch")]
        public JobBatch Batch { get; set; }

        /// <summary>
        /// Gets or sets the cancellation threshold for the scheduled job.
        /// </summary>
        [JsonProperty(PropertyName = "cancellationThreshold")]
        public JobCancellationThreshold CancellationThreshold { get; set; }

        /// <summary>
        /// Gets or sets data related to the operation being performed by this
        /// job. All entries must be of the same type.
        /// </summary>
        [JsonProperty(PropertyName = "data")]
        public IList<JobData> Data { get; set; }

        /// <summary>
        /// Gets or sets list of organizations of the job, only one
        /// organization is supported today, multiple organizations will be
        /// supported soon.
        /// </summary>
        [JsonProperty(PropertyName = "organizations")]
        public IList<string> Organizations { get; set; }

        /// <summary>
        /// Gets or sets the schedule at which to execute the job.
        /// </summary>
        [JsonProperty(PropertyName = "schedule")]
        public JobSchedule Schedule { get; set; }

        /// <summary>
        /// Gets or sets whether the scheduled job is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets whether the scheduled job has completed.
        /// </summary>
        [JsonProperty(PropertyName = "completed")]
        public bool? Completed { get; private set; }

    }
}
